// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

/*
Package horse is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	IDMessage
	GraphIDMessage
	Version
	Paging
	HorseList
	HorseSharingList
	HorseSharing
	Horse
	TrainingList
	TrainingData
	TrainingDataList
	Training
	ActivityList
	Activity
*/
package horse

import "github.com/gogo/protobuf/proto"
import "fmt"
import "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HorseSharingRole int32

const (
	HorseSharingRole_OWNER HorseSharingRole = 0
)

var HorseSharingRole_name = map[int32]string{
	0: "OWNER",
}
var HorseSharingRole_value = map[string]int32{
	"OWNER": 0,
}

func (x HorseSharingRole) String() string {
	return proto.EnumName(HorseSharingRole_name, int32(x))
}
func (HorseSharingRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorProto, []int{0} }

type TrainingType int32

const (
	// @vmasek please add
	TrainingType_OTHER TrainingType = 0
)

var TrainingType_name = map[int32]string{
	0: "OTHER",
}
var TrainingType_value = map[string]int32{
	"OTHER": 0,
}

func (x TrainingType) String() string {
	return proto.EnumName(TrainingType_name, int32(x))
}
func (TrainingType) EnumDescriptor() ([]byte, []int) { return fileDescriptorProto, []int{1} }

type IDMessage struct {
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *IDMessage) Reset()                    { *m = IDMessage{} }
func (m *IDMessage) String() string            { return proto.CompactTextString(m) }
func (*IDMessage) ProtoMessage()               {}
func (*IDMessage) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{0} }

func (m *IDMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IDMessage) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GraphIDMessage struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	GraphType string `protobuf:"bytes,3,opt,name=graphType,proto3" json:"graphType,omitempty"`
}

func (m *GraphIDMessage) Reset()                    { *m = GraphIDMessage{} }
func (m *GraphIDMessage) String() string            { return proto.CompactTextString(m) }
func (*GraphIDMessage) ProtoMessage()               {}
func (*GraphIDMessage) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{1} }

func (m *GraphIDMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GraphIDMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GraphIDMessage) GetGraphType() string {
	if m != nil {
		return m.GraphType
	}
	return ""
}

type Version struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stability string `protobuf:"bytes,2,opt,name=stability,proto3" json:"stability,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{2} }

func (m *Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Version) GetStability() string {
	if m != nil {
		return m.Stability
	}
	return ""
}

type Paging struct {
	Start  uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Number uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Paging) Reset()                    { *m = Paging{} }
func (m *Paging) String() string            { return proto.CompactTextString(m) }
func (*Paging) ProtoMessage()               {}
func (*Paging) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{3} }

func (m *Paging) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Paging) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type HorseList struct {
	Data   []*Horse `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Paging *Paging  `protobuf:"bytes,2,opt,name=paging" json:"paging,omitempty"`
}

func (m *HorseList) Reset()                    { *m = HorseList{} }
func (m *HorseList) String() string            { return proto.CompactTextString(m) }
func (*HorseList) ProtoMessage()               {}
func (*HorseList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{4} }

func (m *HorseList) GetData() []*Horse {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *HorseList) GetPaging() *Paging {
	if m != nil {
		return m.Paging
	}
	return nil
}

type HorseSharingList struct {
	Data   []*HorseSharing `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Paging *Paging         `protobuf:"bytes,2,opt,name=paging" json:"paging,omitempty"`
}

func (m *HorseSharingList) Reset()                    { *m = HorseSharingList{} }
func (m *HorseSharingList) String() string            { return proto.CompactTextString(m) }
func (*HorseSharingList) ProtoMessage()               {}
func (*HorseSharingList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{5} }

func (m *HorseSharingList) GetData() []*HorseSharing {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *HorseSharingList) GetPaging() *Paging {
	if m != nil {
		return m.Paging
	}
	return nil
}

type HorseSharing struct {
	Uuid      uint64           `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty" gorm:"primary_key"`
	HorseUuid uint64           `protobuf:"varint,2,opt,name=horseUuid,proto3" json:"horseUuid,omitempty"`
	UserID    uint64           `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Role      HorseSharingRole `protobuf:"varint,4,opt,name=role,proto3,enum=horse.HorseSharingRole" json:"role,omitempty"`
}

func (m *HorseSharing) Reset()                    { *m = HorseSharing{} }
func (m *HorseSharing) String() string            { return proto.CompactTextString(m) }
func (*HorseSharing) ProtoMessage()               {}
func (*HorseSharing) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{6} }

func (m *HorseSharing) GetUuid() uint64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *HorseSharing) GetHorseUuid() uint64 {
	if m != nil {
		return m.HorseUuid
	}
	return 0
}

func (m *HorseSharing) GetUserID() uint64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *HorseSharing) GetRole() HorseSharingRole {
	if m != nil {
		return m.Role
	}
	return HorseSharingRole_OWNER
}

type Horse struct {
	Uuid       uint64          `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty" gorm:"primary_key"`
	Name       string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State      string          `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	FeiId      string          `protobuf:"bytes,4,opt,name=feiId,proto3" json:"feiId,omitempty"`
	Ueln       string          `protobuf:"bytes,5,opt,name=ueln,proto3" json:"ueln,omitempty"`
	ChipId     string          `protobuf:"bytes,6,opt,name=chipId,proto3" json:"chipId,omitempty"`
	Breed      string          `protobuf:"bytes,7,opt,name=breed,proto3" json:"breed,omitempty"`
	Height     float64         `protobuf:"fixed64,8,opt,name=height,proto3" json:"height,omitempty"`
	Length     float64         `protobuf:"fixed64,9,opt,name=length,proto3" json:"length,omitempty"`
	Girth      float64         `protobuf:"fixed64,10,opt,name=girth,proto3" json:"girth,omitempty"`
	Age        int64           `protobuf:"varint,11,opt,name=age,proto3" json:"age,omitempty"`
	Sex        string          `protobuf:"bytes,12,opt,name=sex,proto3" json:"sex,omitempty"`
	Weight     float64         `protobuf:"fixed64,13,opt,name=weight,proto3" json:"weight,omitempty"`
	Origin     string          `protobuf:"bytes,14,opt,name=origin,proto3" json:"origin,omitempty"`
	Color      string          `protobuf:"bytes,15,opt,name=color,proto3" json:"color,omitempty"`
	Father     string          `protobuf:"bytes,16,opt,name=father,proto3" json:"father,omitempty"`
	Mother     string          `protobuf:"bytes,17,opt,name=mother,proto3" json:"mother,omitempty"`
	Breeder    string          `protobuf:"bytes,18,opt,name=breeder,proto3" json:"breeder,omitempty"`
	Photo      string          `protobuf:"bytes,19,opt,name=photo,proto3" json:"photo,omitempty"`
	BirthDate  string          `protobuf:"bytes,20,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	Pedigree   string          `protobuf:"bytes,21,opt,name=pedigree,proto3" json:"pedigree,omitempty"`
	NationalId string          `protobuf:"bytes,22,opt,name=nationalId,proto3" json:"nationalId,omitempty"`
	License    string          `protobuf:"bytes,23,opt,name=license,proto3" json:"license,omitempty"`
	Trainings  []*Training     `protobuf:"bytes,24,rep,name=trainings" json:"trainings,omitempty" gorm:"ForeignKey:HorseUuid"`
	Sharings   []*HorseSharing `protobuf:"bytes,25,rep,name=sharings" json:"sharings,omitempty" gorm:"ForeignKey:HorseUuid"`
}

func (m *Horse) Reset()                    { *m = Horse{} }
func (m *Horse) String() string            { return proto.CompactTextString(m) }
func (*Horse) ProtoMessage()               {}
func (*Horse) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{7} }

func (m *Horse) GetUuid() uint64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Horse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Horse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Horse) GetFeiId() string {
	if m != nil {
		return m.FeiId
	}
	return ""
}

func (m *Horse) GetUeln() string {
	if m != nil {
		return m.Ueln
	}
	return ""
}

func (m *Horse) GetChipId() string {
	if m != nil {
		return m.ChipId
	}
	return ""
}

func (m *Horse) GetBreed() string {
	if m != nil {
		return m.Breed
	}
	return ""
}

func (m *Horse) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Horse) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Horse) GetGirth() float64 {
	if m != nil {
		return m.Girth
	}
	return 0
}

func (m *Horse) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Horse) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *Horse) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Horse) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Horse) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Horse) GetFather() string {
	if m != nil {
		return m.Father
	}
	return ""
}

func (m *Horse) GetMother() string {
	if m != nil {
		return m.Mother
	}
	return ""
}

func (m *Horse) GetBreeder() string {
	if m != nil {
		return m.Breeder
	}
	return ""
}

func (m *Horse) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *Horse) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Horse) GetPedigree() string {
	if m != nil {
		return m.Pedigree
	}
	return ""
}

func (m *Horse) GetNationalId() string {
	if m != nil {
		return m.NationalId
	}
	return ""
}

func (m *Horse) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Horse) GetTrainings() []*Training {
	if m != nil {
		return m.Trainings
	}
	return nil
}

func (m *Horse) GetSharings() []*HorseSharing {
	if m != nil {
		return m.Sharings
	}
	return nil
}

type TrainingList struct {
	TotalElements    int64       `protobuf:"varint,1,opt,name=totalElements,proto3" json:"totalElements,omitempty"`
	TotalPages       int64       `protobuf:"varint,2,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	NumberOfElements int64       `protobuf:"varint,3,opt,name=numberOfElements,proto3" json:"numberOfElements,omitempty"`
	Last             bool        `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`
	Content          []*Training `protobuf:"bytes,5,rep,name=content" json:"content,omitempty"`
}

func (m *TrainingList) Reset()                    { *m = TrainingList{} }
func (m *TrainingList) String() string            { return proto.CompactTextString(m) }
func (*TrainingList) ProtoMessage()               {}
func (*TrainingList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{8} }

func (m *TrainingList) GetTotalElements() int64 {
	if m != nil {
		return m.TotalElements
	}
	return 0
}

func (m *TrainingList) GetTotalPages() int64 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *TrainingList) GetNumberOfElements() int64 {
	if m != nil {
		return m.NumberOfElements
	}
	return 0
}

func (m *TrainingList) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *TrainingList) GetContent() []*Training {
	if m != nil {
		return m.Content
	}
	return nil
}

type TrainingData struct {
	Time int64   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	X    float64 `protobuf:"fixed64,4,opt,name=x,proto3" json:"x,omitempty"`
	Y    float64 `protobuf:"fixed64,5,opt,name=y,proto3" json:"y,omitempty"`
	Z    float64 `protobuf:"fixed64,6,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *TrainingData) Reset()                    { *m = TrainingData{} }
func (m *TrainingData) String() string            { return proto.CompactTextString(m) }
func (*TrainingData) ProtoMessage()               {}
func (*TrainingData) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{9} }

func (m *TrainingData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TrainingData) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *TrainingData) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *TrainingData) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type TrainingDataList struct {
	TotalElements    int64           `protobuf:"varint,1,opt,name=totalElements,proto3" json:"totalElements,omitempty"`
	TotalPages       int64           `protobuf:"varint,2,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	NumberOfElements int64           `protobuf:"varint,3,opt,name=numberOfElements,proto3" json:"numberOfElements,omitempty"`
	Data             []*TrainingData `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (m *TrainingDataList) Reset()                    { *m = TrainingDataList{} }
func (m *TrainingDataList) String() string            { return proto.CompactTextString(m) }
func (*TrainingDataList) ProtoMessage()               {}
func (*TrainingDataList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{10} }

func (m *TrainingDataList) GetTotalElements() int64 {
	if m != nil {
		return m.TotalElements
	}
	return 0
}

func (m *TrainingDataList) GetTotalPages() int64 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *TrainingDataList) GetNumberOfElements() int64 {
	if m != nil {
		return m.NumberOfElements
	}
	return 0
}

func (m *TrainingDataList) GetData() []*TrainingData {
	if m != nil {
		return m.Data
	}
	return nil
}

type Training struct {
	Uuid          string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	HorseUuid     string          `protobuf:"bytes,2,opt,name=horseUuid,proto3" json:"horseUuid,omitempty"`
	UserId        int64           `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Length        int64           `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Distance      int64           `protobuf:"varint,5,opt,name=distance,proto3" json:"distance,omitempty"`
	MaxSpeed      int64           `protobuf:"varint,6,opt,name=maxSpeed,proto3" json:"maxSpeed,omitempty"`
	AverageSpeed  int64           `protobuf:"varint,7,opt,name=averageSpeed,proto3" json:"averageSpeed,omitempty"`
	MaxPulse      int64           `protobuf:"varint,8,opt,name=maxPulse,proto3" json:"maxPulse,omitempty"`
	AveragePulse  int64           `protobuf:"varint,9,opt,name=averagePulse,proto3" json:"averagePulse,omitempty"`
	BurntCalories int64           `protobuf:"varint,10,opt,name=burntCalories,proto3" json:"burntCalories,omitempty"`
	Start         string          `protobuf:"bytes,11,opt,name=start,proto3" json:"start,omitempty"`
	End           string          `protobuf:"bytes,12,opt,name=end,proto3" json:"end,omitempty"`
	Weather       string          `protobuf:"bytes,13,opt,name=weather,proto3" json:"weather,omitempty"`
	Temperature   int64           `protobuf:"varint,14,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Location      string          `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	TrainingData  []*TrainingData `protobuf:"bytes,16,rep,name=training_data,json=trainingData" json:"training_data,omitempty" gorm:"ForeignKey:trainingUuid"`
}

func (m *Training) Reset()                    { *m = Training{} }
func (m *Training) String() string            { return proto.CompactTextString(m) }
func (*Training) ProtoMessage()               {}
func (*Training) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{11} }

func (m *Training) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Training) GetHorseUuid() string {
	if m != nil {
		return m.HorseUuid
	}
	return ""
}

func (m *Training) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Training) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Training) GetDistance() int64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *Training) GetMaxSpeed() int64 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *Training) GetAverageSpeed() int64 {
	if m != nil {
		return m.AverageSpeed
	}
	return 0
}

func (m *Training) GetMaxPulse() int64 {
	if m != nil {
		return m.MaxPulse
	}
	return 0
}

func (m *Training) GetAveragePulse() int64 {
	if m != nil {
		return m.AveragePulse
	}
	return 0
}

func (m *Training) GetBurntCalories() int64 {
	if m != nil {
		return m.BurntCalories
	}
	return 0
}

func (m *Training) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Training) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *Training) GetWeather() string {
	if m != nil {
		return m.Weather
	}
	return ""
}

func (m *Training) GetTemperature() int64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Training) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Training) GetTrainingData() []*TrainingData {
	if m != nil {
		return m.TrainingData
	}
	return nil
}

type ActivityList struct {
	Data   []*Activity `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Paging *Paging     `protobuf:"bytes,2,opt,name=paging" json:"paging,omitempty"`
}

func (m *ActivityList) Reset()                    { *m = ActivityList{} }
func (m *ActivityList) String() string            { return proto.CompactTextString(m) }
func (*ActivityList) ProtoMessage()               {}
func (*ActivityList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{12} }

func (m *ActivityList) GetData() []*Activity {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ActivityList) GetPaging() *Paging {
	if m != nil {
		return m.Paging
	}
	return nil
}

type Activity struct {
	Id        uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	Intensity int32        `protobuf:"varint,4,opt,name=intensity,proto3" json:"intensity,omitempty"`
	Type      TrainingType `protobuf:"varint,5,opt,name=type,proto3,enum=horse.TrainingType" json:"type,omitempty"`
	HorseUUID string       `protobuf:"bytes,6,opt,name=horseUUID,proto3" json:"horseUUID,omitempty"`
	StartDate int64        `protobuf:"varint,7,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   int64        `protobuf:"varint,8,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{13} }

func (m *Activity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Activity) GetIntensity() int32 {
	if m != nil {
		return m.Intensity
	}
	return 0
}

func (m *Activity) GetType() TrainingType {
	if m != nil {
		return m.Type
	}
	return TrainingType_OTHER
}

func (m *Activity) GetHorseUUID() string {
	if m != nil {
		return m.HorseUUID
	}
	return ""
}

func (m *Activity) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *Activity) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func init() {
	proto.RegisterType((*IDMessage)(nil), "horse.IDMessage")
	proto.RegisterType((*GraphIDMessage)(nil), "horse.GraphIDMessage")
	proto.RegisterType((*Version)(nil), "horse.Version")
	proto.RegisterType((*Paging)(nil), "horse.Paging")
	proto.RegisterType((*HorseList)(nil), "horse.HorseList")
	proto.RegisterType((*HorseSharingList)(nil), "horse.HorseSharingList")
	proto.RegisterType((*HorseSharing)(nil), "horse.HorseSharing")
	proto.RegisterType((*Horse)(nil), "horse.Horse")
	proto.RegisterType((*TrainingList)(nil), "horse.TrainingList")
	proto.RegisterType((*TrainingData)(nil), "horse.TrainingData")
	proto.RegisterType((*TrainingDataList)(nil), "horse.TrainingDataList")
	proto.RegisterType((*Training)(nil), "horse.Training")
	proto.RegisterType((*ActivityList)(nil), "horse.ActivityList")
	proto.RegisterType((*Activity)(nil), "horse.Activity")
	proto.RegisterEnum("horse.HorseSharingRole", HorseSharingRole_name, HorseSharingRole_value)
	proto.RegisterEnum("horse.TrainingType", TrainingType_name, TrainingType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HorseService service

type HorseServiceClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error)
	ListHorses(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*HorseList, error)
	GetTrainingData(ctx context.Context, in *GraphIDMessage, opts ...grpc.CallOption) (*TrainingDataList, error)
	GetTrainingByID(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*Training, error)
	ListTrainings(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*TrainingList, error)
	GetTrainingsByHorseID(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*TrainingList, error)
	GetHorse(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*Horse, error)
	GetHorseFromFEI(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*Horse, error)
	CreateTraining(ctx context.Context, in *Training, opts ...grpc.CallOption) (*Training, error)
	CreateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error)
	UpdateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error)
	DeleteTraining(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteHorse(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreateActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error)
	ReadActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error)
	ReadActivities(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*ActivityList, error)
	UpdateActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error)
	DeleteActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreateHorseSharing(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*HorseSharing, error)
	ReadHorseSharingByHorseID(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*HorseSharingList, error)
	ReadHorseSharingByUserID(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*HorseSharingList, error)
	DeleteHorseSharing(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type horseServiceClient struct {
	cc *grpc.ClientConn
}

func NewHorseServiceClient(cc *grpc.ClientConn) HorseServiceClient {
	return &horseServiceClient{cc}
}

func (c *horseServiceClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ListHorses(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*HorseList, error) {
	out := new(HorseList)
	err := grpc.Invoke(ctx, "/horse.HorseService/ListHorses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetTrainingData(ctx context.Context, in *GraphIDMessage, opts ...grpc.CallOption) (*TrainingDataList, error) {
	out := new(TrainingDataList)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetTrainingData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetTrainingByID(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*Training, error) {
	out := new(Training)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetTrainingByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ListTrainings(ctx context.Context, in *Paging, opts ...grpc.CallOption) (*TrainingList, error) {
	out := new(TrainingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/ListTrainings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetTrainingsByHorseID(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*TrainingList, error) {
	out := new(TrainingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetTrainingsByHorseID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetHorse(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetHorseFromFEI(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetHorseFromFEI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) CreateTraining(ctx context.Context, in *Training, opts ...grpc.CallOption) (*Training, error) {
	out := new(Training)
	err := grpc.Invoke(ctx, "/horse.HorseService/CreateTraining", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) CreateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/CreateHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) UpdateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/UpdateHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) DeleteTraining(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/DeleteTraining", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) DeleteHorse(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/DeleteHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) CreateActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := grpc.Invoke(ctx, "/horse.HorseService/CreateActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ReadActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := grpc.Invoke(ctx, "/horse.HorseService/ReadActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ReadActivities(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*ActivityList, error) {
	out := new(ActivityList)
	err := grpc.Invoke(ctx, "/horse.HorseService/ReadActivities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) UpdateActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := grpc.Invoke(ctx, "/horse.HorseService/UpdateActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) DeleteActivity(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/DeleteActivity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) CreateHorseSharing(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*HorseSharing, error) {
	out := new(HorseSharing)
	err := grpc.Invoke(ctx, "/horse.HorseService/CreateHorseSharing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ReadHorseSharingByHorseID(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*HorseSharingList, error) {
	out := new(HorseSharingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/ReadHorseSharingByHorseID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ReadHorseSharingByUserID(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*HorseSharingList, error) {
	out := new(HorseSharingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/ReadHorseSharingByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) DeleteHorseSharing(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/DeleteHorseSharing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HorseService service

type HorseServiceServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*Version, error)
	ListHorses(context.Context, *google_protobuf.Empty) (*HorseList, error)
	GetTrainingData(context.Context, *GraphIDMessage) (*TrainingDataList, error)
	GetTrainingByID(context.Context, *IDMessage) (*Training, error)
	ListTrainings(context.Context, *Paging) (*TrainingList, error)
	GetTrainingsByHorseID(context.Context, *IDMessage) (*TrainingList, error)
	GetHorse(context.Context, *IDMessage) (*Horse, error)
	GetHorseFromFEI(context.Context, *IDMessage) (*Horse, error)
	CreateTraining(context.Context, *Training) (*Training, error)
	CreateHorse(context.Context, *Horse) (*Horse, error)
	UpdateHorse(context.Context, *Horse) (*Horse, error)
	DeleteTraining(context.Context, *IDMessage) (*google_protobuf.Empty, error)
	DeleteHorse(context.Context, *IDMessage) (*google_protobuf.Empty, error)
	CreateActivity(context.Context, *Activity) (*Activity, error)
	ReadActivity(context.Context, *Activity) (*Activity, error)
	ReadActivities(context.Context, *Activity) (*ActivityList, error)
	UpdateActivity(context.Context, *Activity) (*Activity, error)
	DeleteActivity(context.Context, *Activity) (*google_protobuf.Empty, error)
	CreateHorseSharing(context.Context, *HorseSharing) (*HorseSharing, error)
	ReadHorseSharingByHorseID(context.Context, *HorseSharing) (*HorseSharingList, error)
	ReadHorseSharingByUserID(context.Context, *HorseSharing) (*HorseSharingList, error)
	DeleteHorseSharing(context.Context, *IDMessage) (*google_protobuf.Empty, error)
}

func RegisterHorseServiceServer(s *grpc.Server, srv HorseServiceServer) {
	s.RegisterService(&_HorseService_serviceDesc, srv)
}

func _HorseService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ListHorses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ListHorses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ListHorses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ListHorses(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetTrainingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphIDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetTrainingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetTrainingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetTrainingData(ctx, req.(*GraphIDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetTrainingByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetTrainingByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetTrainingByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetTrainingByID(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ListTrainings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ListTrainings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ListTrainings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ListTrainings(ctx, req.(*Paging))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetTrainingsByHorseID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetTrainingsByHorseID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetTrainingsByHorseID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetTrainingsByHorseID(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetHorse(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetHorseFromFEI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetHorseFromFEI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetHorseFromFEI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetHorseFromFEI(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_CreateTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Training)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).CreateTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/CreateTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).CreateTraining(ctx, req.(*Training))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_CreateHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Horse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).CreateHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/CreateHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).CreateHorse(ctx, req.(*Horse))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_UpdateHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Horse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).UpdateHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/UpdateHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).UpdateHorse(ctx, req.(*Horse))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_DeleteTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).DeleteTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/DeleteTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).DeleteTraining(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_DeleteHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).DeleteHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/DeleteHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).DeleteHorse(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/CreateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).CreateActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ReadActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ReadActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ReadActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ReadActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ReadActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ReadActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ReadActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ReadActivities(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/UpdateActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).UpdateActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/DeleteActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).DeleteActivity(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_CreateHorseSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseSharing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).CreateHorseSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/CreateHorseSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).CreateHorseSharing(ctx, req.(*HorseSharing))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ReadHorseSharingByHorseID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseSharing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ReadHorseSharingByHorseID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ReadHorseSharingByHorseID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ReadHorseSharingByHorseID(ctx, req.(*HorseSharing))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ReadHorseSharingByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseSharing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ReadHorseSharingByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ReadHorseSharingByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ReadHorseSharingByUserID(ctx, req.(*HorseSharing))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_DeleteHorseSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).DeleteHorseSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/DeleteHorseSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).DeleteHorseSharing(ctx, req.(*IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _HorseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "horse.HorseService",
	HandlerType: (*HorseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _HorseService_GetVersion_Handler,
		},
		{
			MethodName: "ListHorses",
			Handler:    _HorseService_ListHorses_Handler,
		},
		{
			MethodName: "GetTrainingData",
			Handler:    _HorseService_GetTrainingData_Handler,
		},
		{
			MethodName: "GetTrainingByID",
			Handler:    _HorseService_GetTrainingByID_Handler,
		},
		{
			MethodName: "ListTrainings",
			Handler:    _HorseService_ListTrainings_Handler,
		},
		{
			MethodName: "GetTrainingsByHorseID",
			Handler:    _HorseService_GetTrainingsByHorseID_Handler,
		},
		{
			MethodName: "GetHorse",
			Handler:    _HorseService_GetHorse_Handler,
		},
		{
			MethodName: "GetHorseFromFEI",
			Handler:    _HorseService_GetHorseFromFEI_Handler,
		},
		{
			MethodName: "CreateTraining",
			Handler:    _HorseService_CreateTraining_Handler,
		},
		{
			MethodName: "CreateHorse",
			Handler:    _HorseService_CreateHorse_Handler,
		},
		{
			MethodName: "UpdateHorse",
			Handler:    _HorseService_UpdateHorse_Handler,
		},
		{
			MethodName: "DeleteTraining",
			Handler:    _HorseService_DeleteTraining_Handler,
		},
		{
			MethodName: "DeleteHorse",
			Handler:    _HorseService_DeleteHorse_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _HorseService_CreateActivity_Handler,
		},
		{
			MethodName: "ReadActivity",
			Handler:    _HorseService_ReadActivity_Handler,
		},
		{
			MethodName: "ReadActivities",
			Handler:    _HorseService_ReadActivities_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _HorseService_UpdateActivity_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _HorseService_DeleteActivity_Handler,
		},
		{
			MethodName: "CreateHorseSharing",
			Handler:    _HorseService_CreateHorseSharing_Handler,
		},
		{
			MethodName: "ReadHorseSharingByHorseID",
			Handler:    _HorseService_ReadHorseSharingByHorseID_Handler,
		},
		{
			MethodName: "ReadHorseSharingByUserID",
			Handler:    _HorseService_ReadHorseSharingByUserID_Handler,
		},
		{
			MethodName: "DeleteHorseSharing",
			Handler:    _HorseService_DeleteHorseSharing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

func init() { proto.RegisterFile("proto.proto", fileDescriptorProto) }

var fileDescriptorProto = []byte{
	// 1685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x6f, 0x1b, 0x47,
	0x12, 0xde, 0x11, 0x49, 0x91, 0x2c, 0x3e, 0x44, 0xb7, 0xf5, 0x18, 0xd1, 0x0f, 0x71, 0x67, 0xbd,
	0xbb, 0x5a, 0x2e, 0xac, 0x01, 0xb4, 0xc0, 0x02, 0xeb, 0x45, 0x80, 0x44, 0xa6, 0x1e, 0x44, 0xfc,
	0x50, 0xc6, 0x52, 0x0c, 0x04, 0x01, 0x8c, 0x21, 0xa7, 0x35, 0x6c, 0x64, 0x38, 0x43, 0xcc, 0x34,
	0x65, 0xd1, 0x82, 0x2e, 0x41, 0x8e, 0xb9, 0xe5, 0x9c, 0x9f, 0x90, 0xdf, 0x90, 0x9f, 0x90, 0x43,
	0x8e, 0x01, 0x7c, 0xca, 0x2f, 0xf0, 0x2f, 0x08, 0xba, 0xba, 0xe7, 0x41, 0x8a, 0x44, 0xc2, 0x53,
	0x2e, 0xc4, 0x54, 0x55, 0xd7, 0xd7, 0xf5, 0xee, 0x22, 0x54, 0x46, 0x61, 0xc0, 0x83, 0x3d, 0xfc,
	0x25, 0x85, 0x41, 0x10, 0x46, 0xb4, 0x79, 0xcf, 0x0d, 0x02, 0xd7, 0xa3, 0x26, 0x32, 0x7b, 0xe3,
	0x0b, 0x93, 0x0e, 0x47, 0x7c, 0x22, 0xcf, 0x34, 0xef, 0x2b, 0xa1, 0x3d, 0x62, 0xa6, 0xed, 0xfb,
	0x01, 0xb7, 0x39, 0x0b, 0xfc, 0x48, 0x49, 0x1f, 0xbb, 0x8c, 0x0f, 0xc6, 0xbd, 0xbd, 0x7e, 0x30,
	0x34, 0xdd, 0xc0, 0x0d, 0x52, 0x0c, 0x41, 0x21, 0x81, 0x5f, 0xf2, 0xb8, 0xf1, 0x18, 0xca, 0xdd,
	0xce, 0x73, 0x1a, 0x45, 0xb6, 0x4b, 0x49, 0x1d, 0x56, 0x98, 0xa3, 0x6b, 0x2d, 0x6d, 0xb7, 0x6c,
	0xad, 0x30, 0x87, 0x34, 0x20, 0x37, 0x66, 0x8e, 0xbe, 0xd2, 0xd2, 0x76, 0xf3, 0x96, 0xf8, 0x34,
	0x2c, 0xa8, 0x1f, 0x87, 0xf6, 0x68, 0xb0, 0x58, 0x87, 0x40, 0x9e, 0x4f, 0x46, 0x14, 0x95, 0xca,
	0x16, 0x7e, 0x93, 0xfb, 0x50, 0x76, 0x85, 0xd6, 0x99, 0x10, 0xe4, 0x50, 0x90, 0x32, 0x8c, 0xff,
	0x43, 0xf1, 0x73, 0x1a, 0x46, 0x2c, 0xf0, 0x85, 0xb2, 0x6f, 0x0f, 0xa9, 0x82, 0xc3, 0x6f, 0xa1,
	0x1c, 0x71, 0xbb, 0xc7, 0x3c, 0xc6, 0x27, 0x0a, 0x35, 0x65, 0x18, 0xff, 0x85, 0xd5, 0x53, 0xdb,
	0x65, 0xbe, 0x4b, 0xd6, 0xa1, 0x10, 0x71, 0x3b, 0xe4, 0xa8, 0x9c, 0xb7, 0x24, 0x41, 0x36, 0x61,
	0xd5, 0x1f, 0x0f, 0x7b, 0x34, 0x54, 0x5e, 0x28, 0xca, 0x38, 0x83, 0xf2, 0x89, 0x08, 0xf5, 0x33,
	0x16, 0x71, 0xd2, 0x82, 0xbc, 0x63, 0x73, 0x5b, 0xd7, 0x5a, 0xb9, 0xdd, 0xca, 0x7e, 0x75, 0x0f,
	0x93, 0xb0, 0x87, 0x72, 0x0b, 0x25, 0xe4, 0xef, 0xb0, 0x3a, 0xc2, 0x6b, 0x10, 0xa6, 0xb2, 0x5f,
	0x53, 0x67, 0xe4, 0xdd, 0x96, 0x12, 0x1a, 0x3d, 0x68, 0xa0, 0xd6, 0xab, 0x81, 0x1d, 0x32, 0xdf,
	0x45, 0xf0, 0x7f, 0x4e, 0x81, 0xdf, 0xcd, 0x82, 0xab, 0x63, 0xcb, 0xdd, 0xf1, 0xbd, 0x06, 0xd5,
	0xac, 0x36, 0x69, 0x43, 0x7e, 0x3c, 0x56, 0x39, 0xc8, 0x1f, 0x6c, 0x7e, 0x78, 0xbf, 0x43, 0xdc,
	0x20, 0x1c, 0x3e, 0x31, 0x46, 0x21, 0x1b, 0xda, 0xe1, 0xe4, 0xcd, 0x57, 0x74, 0x62, 0x58, 0x78,
	0x46, 0x04, 0x13, 0x41, 0xcf, 0xd3, 0xbc, 0xa6, 0x0c, 0x11, 0xac, 0x71, 0x44, 0xc3, 0x6e, 0x07,
	0x93, 0x94, 0xb7, 0x14, 0x45, 0xfe, 0x0d, 0xf9, 0x30, 0xf0, 0xa8, 0x9e, 0x6f, 0x69, 0xbb, 0xf5,
	0xfd, 0xad, 0x79, 0x2e, 0x04, 0x1e, 0xb5, 0xf0, 0x90, 0xf1, 0x4b, 0x01, 0x0a, 0x28, 0x5a, 0xca,
	0xb0, 0x38, 0xf3, 0x2b, 0x99, 0xcc, 0xcb, 0x8c, 0xf2, 0xb8, 0x64, 0x24, 0x21, 0xb8, 0x17, 0x94,
	0x75, 0x1d, 0xb4, 0xa6, 0x6c, 0x49, 0x42, 0xe8, 0x8f, 0xa9, 0xe7, 0xeb, 0x05, 0xa9, 0x2f, 0xbe,
	0x85, 0x3b, 0xfd, 0x01, 0x1b, 0x75, 0x1d, 0x7d, 0x15, 0xb9, 0x8a, 0x12, 0x08, 0xbd, 0x90, 0x52,
	0x47, 0x2f, 0x4a, 0x04, 0x24, 0xc4, 0xe9, 0x01, 0x65, 0xee, 0x80, 0xeb, 0xa5, 0x96, 0xb6, 0xab,
	0x59, 0x8a, 0x12, 0x7c, 0x8f, 0xfa, 0x2e, 0x1f, 0xe8, 0x65, 0xc9, 0x97, 0x94, 0x40, 0x71, 0x59,
	0xc8, 0x07, 0x3a, 0x20, 0x5b, 0x12, 0xa2, 0x65, 0x6c, 0x97, 0xea, 0x95, 0x96, 0xb6, 0x9b, 0xb3,
	0xc4, 0xa7, 0xe0, 0x44, 0xf4, 0x4a, 0xaf, 0xe2, 0x5d, 0xe2, 0x53, 0x20, 0xbe, 0x95, 0x37, 0xd5,
	0x24, 0xe2, 0xdb, 0xe4, 0xa6, 0x20, 0x64, 0x2e, 0xf3, 0xf5, 0xba, 0xb4, 0x57, 0x52, 0xe2, 0xa6,
	0x7e, 0xe0, 0x05, 0xa1, 0xbe, 0x26, 0xed, 0x45, 0x42, 0x9c, 0xbe, 0xb0, 0xf9, 0x80, 0x86, 0x7a,
	0x43, 0x9e, 0x96, 0x94, 0xe0, 0x0f, 0x03, 0xe4, 0xdf, 0x91, 0x7c, 0x49, 0x11, 0x1d, 0x8a, 0xe8,
	0x28, 0x0d, 0x75, 0x82, 0x82, 0x98, 0x14, 0xf8, 0xa3, 0x41, 0xc0, 0x03, 0xfd, 0xae, 0xc4, 0x47,
	0x42, 0x94, 0x4a, 0x4f, 0xb8, 0xd4, 0x11, 0x19, 0x58, 0x97, 0x7d, 0x97, 0x30, 0x48, 0x13, 0x4a,
	0x23, 0xea, 0x30, 0x37, 0xa4, 0x54, 0xdf, 0x40, 0x61, 0x42, 0x93, 0x87, 0x00, 0x3e, 0xce, 0x24,
	0xdb, 0xeb, 0x3a, 0xfa, 0x26, 0x4a, 0x33, 0x1c, 0x61, 0x89, 0xc7, 0xfa, 0xd4, 0x8f, 0xa8, 0xbe,
	0x25, 0x2d, 0x51, 0x24, 0x79, 0x01, 0x65, 0x1e, 0xda, 0xcc, 0x67, 0xbe, 0x1b, 0xe9, 0x3a, 0x36,
	0xcc, 0x9a, 0xaa, 0xb6, 0x33, 0xc5, 0x3f, 0xd8, 0xf9, 0xf0, 0x7e, 0xe7, 0x9e, 0xac, 0xa3, 0xa3,
	0x20, 0xa4, 0xcc, 0xf5, 0x3f, 0xa5, 0x93, 0x27, 0x27, 0x71, 0x11, 0x1b, 0x56, 0x0a, 0x41, 0x4e,
	0xa1, 0x14, 0xc9, 0x02, 0x8d, 0xf4, 0xed, 0x85, 0xfd, 0xf7, 0xfb, 0x90, 0x09, 0x8a, 0xf1, 0xa3,
	0x06, 0xd5, 0xd8, 0x14, 0x6c, 0xef, 0x47, 0x50, 0xe3, 0x01, 0xb7, 0xbd, 0x43, 0x8f, 0x0e, 0xa9,
	0xcf, 0x23, 0xac, 0xf6, 0x9c, 0x35, 0xcd, 0x14, 0x21, 0x41, 0xc6, 0xa9, 0xed, 0xd2, 0x08, 0x8b,
	0x3c, 0x67, 0x65, 0x38, 0xa4, 0x0d, 0x0d, 0x39, 0x98, 0x5e, 0x5e, 0x24, 0x40, 0x39, 0x3c, 0x75,
	0x8b, 0x2f, 0x4a, 0xdd, 0xb3, 0x23, 0x8e, 0xf5, 0x5f, 0xb2, 0xf0, 0x9b, 0xfc, 0x0b, 0x8a, 0xfd,
	0xc0, 0xe7, 0xd4, 0xe7, 0x7a, 0x61, 0x6e, 0xd8, 0xac, 0x58, 0x6e, 0x3c, 0x4b, 0x1d, 0xe8, 0x88,
	0xb1, 0x23, 0x06, 0x36, 0x1b, 0x52, 0x75, 0x1d, 0x7e, 0x93, 0x2a, 0x68, 0x57, 0x88, 0xaf, 0x59,
	0xda, 0x95, 0xa0, 0x26, 0xd8, 0x58, 0x9a, 0xa5, 0x4d, 0x04, 0xf5, 0x0e, 0x1b, 0x4a, 0xb3, 0xb4,
	0x77, 0xc6, 0x0f, 0x1a, 0x34, 0xb2, 0x70, 0x7f, 0x52, 0x4c, 0xe2, 0x21, 0x9b, 0x9f, 0x4a, 0x72,
	0xd6, 0x30, 0x39, 0x64, 0x8d, 0x6f, 0xf3, 0x50, 0x8a, 0xd9, 0x38, 0x34, 0xc6, 0xc9, 0xeb, 0xb5,
	0x60, 0x42, 0x96, 0xe7, 0x4d, 0x48, 0x47, 0x59, 0xa2, 0xa8, 0xcc, 0x90, 0xc8, 0x4b, 0xbe, 0x1a,
	0x12, 0x4d, 0x28, 0x39, 0x2c, 0xe2, 0xb6, 0xdf, 0xa7, 0x18, 0xc1, 0x9c, 0x95, 0xd0, 0x42, 0x36,
	0xb4, 0xaf, 0x5e, 0x8d, 0xc4, 0x24, 0x5a, 0x95, 0xb2, 0x98, 0x26, 0x06, 0x54, 0xed, 0x4b, 0x1a,
	0xda, 0x2e, 0x95, 0xf2, 0x22, 0xca, 0xa7, 0x78, 0x4a, 0xff, 0x74, 0xec, 0x45, 0x14, 0x47, 0x96,
	0xd4, 0x47, 0x3a, 0xa3, 0x2f, 0xe5, 0xe5, 0x29, 0x7d, 0x79, 0xe6, 0x11, 0xd4, 0x7a, 0xe3, 0xd0,
	0xe7, 0x4f, 0x6d, 0x2f, 0x08, 0x19, 0x8d, 0x70, 0x90, 0xe5, 0xac, 0x69, 0x66, 0xfa, 0xac, 0x56,
	0x92, 0x21, 0x1c, 0x72, 0x31, 0xd4, 0xa8, 0xef, 0xc4, 0x43, 0x8d, 0xfa, 0xd8, 0xd4, 0x6f, 0xa9,
	0x9c, 0x47, 0x35, 0xd9, 0xd4, 0x8a, 0x24, 0x2d, 0xa8, 0x70, 0x3a, 0x1c, 0xd1, 0xd0, 0xe6, 0xe3,
	0x90, 0xe2, 0x6c, 0xcb, 0x59, 0x59, 0x96, 0xf0, 0xc4, 0x0b, 0xfa, 0x38, 0x20, 0xd4, 0x8c, 0x4b,
	0x68, 0xf2, 0x25, 0xd4, 0xe2, 0x7e, 0x7e, 0x83, 0x29, 0x6e, 0x2c, 0x4c, 0xf1, 0x81, 0xf1, 0xe1,
	0xfd, 0xce, 0xc3, 0x5b, 0x7d, 0x1c, 0xab, 0xcb, 0x56, 0xae, 0xf2, 0x8c, 0x86, 0xf1, 0x05, 0x54,
	0x3f, 0xe9, 0x73, 0x76, 0xc9, 0xf8, 0x04, 0x2b, 0xf7, 0x6f, 0x53, 0x8f, 0x75, 0xdc, 0x44, 0xf1,
	0x91, 0xe5, 0x1e, 0xea, 0x9f, 0x34, 0x28, 0xc5, 0x9a, 0xe4, 0x1f, 0xc9, 0x9a, 0xb4, 0xf8, 0x25,
	0x5c, 0x91, 0xe5, 0xc7, 0x44, 0x9f, 0x46, 0x62, 0xdb, 0x11, 0xb5, 0x54, 0xb0, 0x52, 0x86, 0x28,
	0x73, 0x5c, 0xae, 0x0a, 0xf8, 0x10, 0xcf, 0xc6, 0x40, 0x6c, 0x53, 0xe9, 0xc6, 0x25, 0x8b, 0xf6,
	0xbc, 0xdb, 0x51, 0xaf, 0x5f, 0xca, 0x50, 0x2b, 0x55, 0xc8, 0x71, 0xb4, 0xcb, 0xd2, 0x4a, 0x19,
	0x22, 0x93, 0xd4, 0x77, 0x50, 0x26, 0xcb, 0x2a, 0x26, 0xdb, 0x0f, 0xa6, 0xd7, 0x1b, 0xf1, 0xe8,
	0x93, 0x32, 0x14, 0x5e, 0xbe, 0x7e, 0x71, 0x68, 0x35, 0xfe, 0xd2, 0xde, 0x4e, 0x27, 0x8b, 0x30,
	0x05, 0x45, 0x67, 0x27, 0x42, 0xb4, 0xff, 0x4d, 0x3d, 0x5e, 0x5a, 0x68, 0x78, 0xc9, 0xfa, 0x94,
	0x1c, 0x01, 0x1c, 0x53, 0x1e, 0xef, 0x7d, 0x9b, 0x7b, 0x72, 0xa7, 0xdd, 0x8b, 0x97, 0xd5, 0xbd,
	0x43, 0xb1, 0xf0, 0x36, 0xeb, 0xca, 0x43, 0x75, 0xce, 0x68, 0x7c, 0xfd, 0xf3, 0xaf, 0xdf, 0xad,
	0x00, 0x29, 0x99, 0x97, 0x4a, 0xf3, 0x19, 0x80, 0x48, 0x1c, 0x62, 0x47, 0x0b, 0x71, 0x1a, 0xd9,
	0xa9, 0x2f, 0xce, 0x1b, 0xeb, 0x88, 0x54, 0x27, 0x55, 0xd3, 0x63, 0x11, 0x37, 0x23, 0x36, 0x1c,
	0x79, 0x94, 0x0c, 0x61, 0xed, 0x98, 0xf2, 0xa9, 0xf1, 0xb8, 0xa1, 0x54, 0xa7, 0xd7, 0xde, 0xe6,
	0xd6, 0x9c, 0xfa, 0x43, 0xe0, 0x36, 0x02, 0x3f, 0x22, 0x86, 0x99, 0x3c, 0x43, 0xe6, 0x35, 0x73,
	0x6e, 0xcc, 0x6b, 0x91, 0x98, 0x1b, 0xf3, 0x3a, 0x59, 0x7c, 0x6f, 0xc8, 0xf3, 0xa9, 0xeb, 0x0e,
	0x26, 0xdd, 0x0e, 0x89, 0x2d, 0x4d, 0x6f, 0x9a, 0x9d, 0xe4, 0xc6, 0x16, 0xde, 0x70, 0x87, 0xac,
	0xcd, 0xdc, 0x40, 0x8e, 0xa1, 0x26, 0x4c, 0x38, 0x4b, 0x9e, 0xbf, 0xe9, 0xc2, 0x6c, 0xce, 0xd6,
	0x0b, 0xda, 0x4b, 0x10, 0xad, 0x4a, 0x20, 0x45, 0x23, 0xaf, 0x61, 0x23, 0x63, 0x57, 0x74, 0x30,
	0xc1, 0xb8, 0xcd, 0xb5, 0x6e, 0x2e, 0x66, 0x6a, 0x21, 0x7a, 0x9e, 0x02, 0xff, 0x0f, 0x4a, 0xc7,
	0x54, 0x26, 0x6b, 0x0e, 0xd6, 0xd4, 0xe2, 0x6d, 0xd4, 0x10, 0xa4, 0x48, 0x0a, 0xd2, 0xb9, 0x8f,
	0x31, 0x56, 0x28, 0x3a, 0x0a, 0x83, 0xe1, 0xd1, 0x61, 0x77, 0x59, 0x84, 0x73, 0xa8, 0x3f, 0x0d,
	0xa9, 0xcd, 0x69, 0x32, 0xff, 0x67, 0x43, 0x7b, 0x3b, 0xd6, 0x7f, 0x45, 0x88, 0x7b, 0xc6, 0xa6,
	0x79, 0x9d, 0x3c, 0x02, 0x19, 0x87, 0x9e, 0x68, 0x6d, 0xf2, 0x11, 0x54, 0x24, 0xac, 0x74, 0x6b,
	0xca, 0x84, 0x19, 0x83, 0x54, 0xac, 0x8d, 0xa2, 0xd9, 0x47, 0x0d, 0xa5, 0x7e, 0x3e, 0x72, 0x96,
	0x51, 0x6f, 0x16, 0xcd, 0x31, 0x6a, 0x08, 0xf5, 0x57, 0x50, 0xef, 0x50, 0x8f, 0x66, 0x9c, 0xba,
	0x1d, 0x95, 0x05, 0x5d, 0x11, 0xa7, 0xa9, 0x7d, 0xab, 0x90, 0x8e, 0xa0, 0x22, 0x41, 0x17, 0x65,
	0x6a, 0x11, 0xa2, 0x8a, 0x78, 0x5b, 0x45, 0xfc, 0x24, 0x8e, 0x78, 0x32, 0x06, 0x67, 0x27, 0x6a,
	0x73, 0x96, 0x11, 0x37, 0xa6, 0x51, 0x36, 0x6d, 0xc5, 0x12, 0x6e, 0x9e, 0x40, 0xd5, 0xa2, 0xb6,
	0xb3, 0x04, 0xce, 0x26, 0xe2, 0x34, 0x48, 0x3d, 0xc1, 0x91, 0x36, 0xbd, 0x86, 0x7a, 0x06, 0x49,
	0xbc, 0x70, 0xb7, 0xb0, 0xee, 0xce, 0x30, 0xb0, 0xa6, 0x77, 0x10, 0x6f, 0x9b, 0x6c, 0xc5, 0x78,
	0x8c, 0x46, 0x71, 0x51, 0x9c, 0x77, 0x3b, 0x37, 0xe4, 0x05, 0xd4, 0x65, 0x22, 0x97, 0x30, 0xb2,
	0x89, 0xa0, 0xeb, 0xcd, 0xd9, 0x0c, 0x08, 0x97, 0x3f, 0x8b, 0x33, 0xbb, 0x18, 0x6f, 0x51, 0x1a,
	0x94, 0xef, 0xed, 0x59, 0xdf, 0x2d, 0x20, 0x99, 0x52, 0x8d, 0xff, 0x3f, 0xce, 0x5b, 0x89, 0x9b,
	0xf3, 0x98, 0x99, 0xfa, 0xb5, 0xfb, 0x7d, 0x1a, 0x61, 0xf9, 0x7b, 0xb0, 0x2d, 0xe2, 0x39, 0xb5,
	0x4f, 0x27, 0xf3, 0x62, 0x2e, 0xf4, 0xbc, 0xff, 0x8f, 0x18, 0x62, 0xd5, 0x6c, 0x64, 0x5b, 0xc1,
	0x9b, 0x78, 0x2e, 0xdb, 0x79, 0xc4, 0x05, 0xfd, 0xf6, 0x6d, 0xe7, 0xf2, 0x5f, 0xea, 0x72, 0x97,
	0x3d, 0xc0, 0xcb, 0xb6, 0xc8, 0x46, 0x7c, 0x99, 0xd8, 0xe4, 0xcc, 0x6b, 0xf9, 0x8f, 0xf7, 0x86,
	0x9c, 0x01, 0xc9, 0xb4, 0x40, 0x1c, 0xaa, 0x3f, 0xde, 0x09, 0xaa, 0x8c, 0xdb, 0xd5, 0x18, 0x5e,
	0x24, 0xa0, 0xb7, 0x8a, 0xa7, 0xfe, 0xf3, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x9c, 0x0e,
	0x75, 0xf4, 0x11, 0x00, 0x00,
}
