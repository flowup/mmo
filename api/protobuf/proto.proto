syntax = "proto3";

package api;
option go_package = "github.com/flowup/mmo/api";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service ApiService {
    rpc GetVersion (google.protobuf.Empty) returns (Version) {
        option (google.api.http) = {
            get: "/version"
        };
    }

    rpc GetServices (google.protobuf.Empty) returns (Services) {
        option (google.api.http) = {
            get: "/services"
        };
    }

    rpc GetGlobalPlugins (google.protobuf.Empty) returns (Plugins) {
        option (google.api.http) = {
            get: "/plugins"
        };
    }

    rpc GetPlugins (Service) returns (Plugins) {
        option (google.api.http) = {
            get: "/services/{name}/plugins"
        };
    }

    rpc GetKubernetesConfigs (Service) returns (KubernetesConfigs) {
        option (google.api.http) = {
            get: "/services/{name}/kubernetes"
        };
    }

    rpc KubernetesFormFromPlugins(Service) returns (KubernetesServiceForm) {
        option (google.api.http) = {
            get: "/services/{name}/kubernetes/form"
        };
    }

    rpc KubernetesConfigFromForm(KubernetesServiceForm) returns (KubernetesConfigs) {
        option (google.api.http) = {
            post: "/services/{serviceName}/kubernetes/form"
        };
    }
}

message Version {
    string name = 1;
}

message Services {
    repeated Service services = 1;
}

message Service {
    string name = 1;
    string description = 2;
}

message Plugins {
    repeated Plugin plugins = 1;
}

message Plugin {
    string name = 1;
    string version = 2;
}

message KubernetesConfigs {
    repeated KubernetesConfig configs = 1;
}

message KubernetesConfig {
    string name = 1;
    string type = 2;
    string path = 3;
    string data = 4;
}

message KubernetesServiceForm {
    string serviceName = 1;
    repeated KubernetesPort ports = 2;
    repeated KubernetesVolume volumes = 3;
    repeated KubernetesEnvVar variables = 4;
}

message KubernetesVolume {
    string name = 1;
    string mountPath = 2;
    string pvcName = 3;
    int32 pvcSizeGB = 4;
    string gceDisk = 5;
}

message KubernetesPort {
    string name = 1;
    string port = 2;
}

message KubernetesEnvVar {
    string name = 1;
    string value = 2;
}