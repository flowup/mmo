package main

import (
	"net"
	"sync"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"{{if .WebRPC}}
	"github.com/improbable-eng/grpc-web/go/grpcweb"
    "net/http"{{end}}

    "github.com/sirupsen/logrus"
    "github.com/evalphobia/logrus_sentry"
)

func init() {
	func init() {
    	log.SetFormatter(&log.JSONFormatter{})

    	log.SetOutput(os.Stdout)

    	log.SetLevel(log.DebugLevel)

    	// Init Logrus with Sentry
    	sentryDsn, ok := os.LookupEnv("SENTRY_DSN")
    	if ok {
    		hook, err := logrus_sentry.NewSentryHook(sentryDsn, []log.Level{
    			log.PanicLevel,
    			log.FatalLevel,
    			log.ErrorLevel,
    		})

    		if err == nil {
    			hook.Timeout = 20 * time.Second
    			hook.StacktraceConfiguration.Enable = true
    			log.AddHook(hook)
    		}
    	} else {
    		log.Warnln("No SENTRY_DSN was found, sentry reporting won't work")
    	}
    }
}


func main(){
	lis, err := net.Listen("tcp", "")
	if err != nil {
		{{.Name}}.Log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()

	// Register reflection service on gRPC server.
	reflection.Register(s)

	{{if .WebRPC}}options := []grpcweb.Option{}

	// Wrap grpc server to grpc-web server
	wrappedServer := grpcweb.WrapServer(s, options...)

	handler := func(resp http.ResponseWriter, req *http.Request) {
		wrappedServer.ServeHTTP(resp, req)
	}

	httpServer := http.Server{
		Addr:    "",
		Handler: http.HandlerFunc(handler),
	}
	{{end}}
	wg := &sync.WaitGroup{}
	wg.Add(1)

	go func() {
		{{.Name}}.Log.Println("Starting gRPC server on", "")
		if err := s.Serve(lis); err != nil {
			{{.Name}}.Log.Fatalf("grpc: failed to serve: %v", err)
		}

		wg.Done()
	}()	{{if .WebRPC}}
	go func() {
		{{.Name}}.Log.Println("starting gRPC Web server on", "")
		if err := httpServer.ListenAndServe(); err != nil {
			{{.Name}}.Log.Fatalf("grpc-web: failed to serve: %v", err)
		}

		wg.Done()
	}(){{end}}

	wg.Wait()
}
