// Code generated by go-bindata.
// sources:
// commands/service/template/access_go
// commands/service/template/access_test_go
// commands/service/template/cmd/{{.Name}}/main_go
// commands/service/template/deployment/deployment.yaml.template
// commands/service/template/protobuf/proto.proto
// commands/service/template/service_go
// commands/service/template/service_test_go
// DO NOT EDIT!

package service

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _access_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x41\x4e\xc4\x30\x0c\x05\xd0\xbd\x4f\xf1\x57\x08\x58\x30\x67\xe0\x02\xb3\xe2\x02\x26\xf3\x87\x29\xb4\x69\xe4\x38\xaa\x50\xc8\xdd\x51\x9b\xb0\x42\xb3\x4c\xec\xff\xfc\x93\x86\x2f\xfd\x20\x6a\x7d\x39\xeb\xc2\xd6\x44\x4e\xa7\xbf\x17\x7e\xf0\x36\xf9\xcc\xd6\x5e\x43\x60\xce\x30\x26\x63\x66\xf4\x0c\x45\x76\x2b\xc1\x8b\x11\x7e\x53\xc7\xb4\xa4\x99\xcb\x31\xbb\xa8\x2b\xf4\x88\xec\xda\x75\x35\xf8\x8d\xff\x55\xf1\xef\x44\x0c\xbb\x73\xa8\x22\xbd\xc3\x99\xdb\xbd\x1a\xc1\xa8\xce\xbd\x43\xe4\x36\x0e\x61\x7d\xff\x64\x70\x68\xbc\xc0\xe8\xc5\x62\xc6\xe4\x72\x2d\x31\xec\x54\x4f\x3e\x3e\xe1\x79\x18\x55\x00\x8c\x4d\x3c\xf4\xcf\xda\xa4\xfd\x06\x00\x00\xff\xff\xe7\x9c\x3f\x60\x11\x01\x00\x00")

func access_goBytes() ([]byte, error) {
	return bindataRead(
		_access_go,
		"access_go",
	)
}

func access_go() (*asset, error) {
	bytes, err := access_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "access_go", size: 273, mode: os.FileMode(436), modTime: time.Unix(1502117101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _access_test_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6a\xc3\x30\x14\x44\xd7\xfe\xa7\x18\xbc\x92\x4d\xb1\x4e\xd0\x45\xa1\xeb\x2c\x1a\x5f\x40\x15\x3f\x8e\x68\x2d\x1b\xe9\x0b\x13\x5c\xdd\xbd\x58\x09\x0d\xdd\x98\x64\x27\x0d\xf3\x9e\xd0\xcc\xc6\x7e\x99\x81\xb1\xae\xdd\xc1\x8c\x9c\x33\x91\x1b\xe7\x29\x08\x14\x55\xf5\xe0\xe4\x9c\x3e\x3b\x3b\x8d\x3a\x4a\x60\xb1\xe7\xa0\x85\xa3\xb8\xd3\x45\xc7\xe4\x84\x6b\x02\x80\xba\x64\x7e\xa8\xa9\x21\x92\xcb\xfc\xa7\xc3\x0f\x7a\x27\xdf\x9c\xf3\x9b\xb5\x1c\xe3\x71\x63\x10\x25\x24\x2b\x58\xa9\x2a\x8e\xae\xa4\x44\x95\x29\x1d\xb4\xd7\x2e\x65\xa2\x53\xf2\x16\x2a\xa2\xdd\xf3\x35\x38\xb2\xa4\xb9\x9c\x55\x53\xb4\xdd\x4d\xf5\x8a\x03\x2f\xd7\xaa\x6a\x9e\x15\xf6\x1c\xa5\xf8\x36\x50\x6b\x6c\xf7\x47\x05\xff\xd8\xc2\x6c\xc9\x1e\xa3\x04\xed\x6d\xc6\xae\x6f\xee\xe3\x7c\x24\xaf\xe4\x05\x9e\x17\xb5\xfb\xe4\x33\xdf\xeb\xd9\x84\xf7\x69\xf1\xf7\xc9\x28\xd3\x6f\x00\x00\x00\xff\xff\x96\xd3\x18\xdb\x0a\x02\x00\x00")

func access_test_goBytes() ([]byte, error) {
	return bindataRead(
		_access_test_go,
		"access_test_go",
	)
}

func access_test_go() (*asset, error) {
	bytes, err := access_test_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "access_test_go", size: 522, mode: os.FileMode(436), modTime: time.Unix(1502377957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdNameMain_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x6d\x6f\xdb\xb6\x13\x7f\x2d\x7d\x8a\xab\x80\x7f\xff\x52\xe1\xca\xe9\x80\x0c\x83\x87\xbc\xc8\x92\xf4\x61\xc8\xd2\x20\x0e\x60\x0c\x45\x51\xd0\xd2\x59\x26\x2c\x93\x2a\x49\x45\x09\x34\x7d\xf7\xe1\x48\xca\x92\x9c\xb6\x1b\x96\x37\x31\x79\x4f\xbf\xbb\xfb\xf1\x4e\x15\xcb\x76\xac\x40\xd8\x33\x2e\xc2\x90\xef\x2b\xa9\x0c\xc4\x21\x00\x40\x24\x75\x14\x06\x91\x40\x43\xff\xf4\x93\xc8\xe8\x7f\x21\x65\x51\x62\x5a\xc8\x92\x89\x22\x95\xaa\x98\x17\xaa\xfa\x81\x64\xae\x70\x53\x62\x66\xb8\x14\x51\x18\xb4\x2d\xdf\x40\xba\xc2\xf5\xdd\xed\x45\xd7\x91\x11\x37\xdb\x7a\x9d\x66\x72\x3f\xe7\xfb\x4a\xc9\x35\x5b\x97\xf8\x1a\x85\x33\x7e\xdd\xe0\x7a\x5e\x48\xfb\xbb\xc1\x75\xe4\x70\x09\x34\xf3\xad\x31\x95\x3b\xb6\x2d\x8a\xbc\xeb\x42\x7b\x28\x65\x01\x63\x9f\x9a\xab\xba\xd2\x28\xe6\xa5\x2c\x54\xad\xa3\xd0\x9b\x10\x8a\x25\x0a\xa3\x9e\xba\xce\x39\x1d\x19\xe1\x03\x2b\xab\xad\x5c\x73\xe6\xcd\xbe\x68\xab\xfa\x8d\x78\xce\xd3\x3b\x66\xb0\x61\x07\x57\x53\x7c\x51\x26\x85\xc1\x47\x13\x3d\x8b\x63\x33\xc4\x4c\xea\x27\x6d\xd0\x1f\x0b\xe7\x6a\xae\x6a\x61\xf8\x1e\xa7\x21\x93\x30\xdc\xd4\x22\x03\x2e\xb8\x89\x13\x68\xfb\x94\xd3\x25\x9a\xb7\x52\xed\x99\x31\xa8\xe2\x97\x74\xf3\xfb\xf2\xe3\xcd\xe1\xaa\xed\x92\x70\xac\xfb\xb1\x36\x55\x6d\x62\xa9\xd3\xa5\xc9\x65\x6d\xa6\xd2\x6b\x7c\xc0\x32\xa6\xc3\x25\xae\xeb\xc2\x1e\x93\xef\x16\x6e\x3e\x87\x0f\x82\x1b\xb8\xb6\x95\x82\x86\x9b\x2d\x38\x05\x2b\x76\x95\xbb\xd4\x62\x06\x72\x07\x8b\x33\x90\x3a\xbd\x96\x72\x57\x57\x57\xe2\x21\x8e\x96\x57\x37\xf7\x77\x7f\x7e\xb9\x5c\xde\x44\x89\xd5\xe7\x1b\xd2\x73\x99\xd1\xdf\x56\xca\xdd\x0c\x50\x29\xb2\x9d\x74\x23\xbd\xc1\xc6\x05\x7a\x2f\xe5\x2e\x1e\x05\xfa\xf4\x99\xc0\x5b\xdc\x83\xa3\x3e\xc1\x5b\x26\x78\x66\x65\xb3\x67\xb2\xb7\xcc\xb0\xf2\x3b\xb2\x2b\xa5\xa4\x3a\x92\xf5\x65\xf5\xc0\x09\xe5\xd9\x19\x08\x5e\xc2\x34\x2e\x25\x91\xde\xf3\x3d\xca\xda\xc0\x19\xfc\x74\x02\xaf\x80\xba\x9b\x2e\x31\x93\x22\x7f\xae\xbb\x34\x2c\xdb\x19\xc5\x32\xbc\x90\x62\xc3\x8b\x5a\x31\x7a\x40\xe9\x95\xa0\xe7\x01\x67\x60\x54\x8d\xcf\x20\x9e\xe7\xb9\x2d\x05\xb9\x48\x06\x90\xf6\x57\x07\x58\x6a\x1c\xe1\x22\x83\x15\x53\xa2\x14\x71\x74\x23\x61\x68\x04\x34\x4c\xc3\x46\xd6\x22\x9f\xf9\xee\x81\x42\x1a\x0b\x5c\x14\xd0\x48\xf1\x7f\x03\x8d\x54\x3b\xdf\xaf\x6e\x42\xd0\x2e\xf4\x0c\xa5\x71\x12\x27\x6d\x18\x94\x5c\x1f\xda\x27\xd0\xa4\xd7\x5c\x1b\x14\x71\x64\xb2\x2a\x9a\x41\x74\x7a\x72\x72\xfa\x26\x4a\xc2\xc0\x97\xef\x45\x5f\xbe\x20\x38\x34\x64\x13\x47\x1b\xc6\x4b\xcc\xc1\x48\x28\xad\xfd\x02\xfe\xf7\x10\x59\xbf\x49\x18\x74\x61\x18\xcc\xe7\x90\x29\x64\x06\x81\xe5\x39\xa7\x5a\xb1\x12\x14\x6a\x59\xab\x0c\x29\x1d\x05\x66\x8b\xa0\x51\x3d\xf0\x0c\xc3\x80\x65\x19\x6a\x4d\xa0\xda\x36\xbd\x61\x7b\xec\x3a\xe2\xd3\xb9\xbd\x8e\x7d\x5b\x07\xa7\x64\x4b\xcf\xd3\x3a\x40\x15\x06\xd6\x94\x6e\x1c\x0b\xe9\x92\xac\x08\x87\xc2\x82\x30\x1e\x05\x1c\xc2\xdc\x79\xb9\xbf\x81\xbf\xe0\x9e\x9b\x12\xbb\x6e\xe9\x74\xbd\x37\x3d\x9b\x42\xf3\xd2\xd8\x21\x4f\x92\xd0\x45\xeb\xbd\xc1\x30\x66\xfb\xa0\x20\x05\x14\x77\xb7\x17\x1e\x74\x1a\x06\x83\xce\x01\x45\xac\x87\x64\xf9\x06\x98\x78\x3a\x98\x53\xd1\xf5\x0c\x9a\xad\x2c\x11\x58\x55\x81\xde\xca\xba\xcc\xed\x7d\x18\x34\x05\x95\xe0\x25\xad\x85\x74\xc5\xb8\x79\xa7\x64\x5d\xb5\x1d\x09\x88\x88\xf1\x1b\x2a\x47\x21\x81\xe8\x60\x67\x95\xeb\xe8\x07\xb1\x91\x44\xb9\xa5\x61\x8e\x51\x23\x84\x20\xc5\x84\x13\x3d\x29\x16\x67\xa0\x53\x5b\x96\xb8\xe4\x3a\xf9\xf5\x98\x29\x13\xaa\x50\x53\x16\x30\x10\xc6\xba\x9e\xf0\xc5\x12\x86\x60\x5e\x4a\x81\x31\x11\xc8\xb6\xee\x68\x35\x85\x81\xac\xa8\x52\xb6\xd3\x9f\x3e\xfb\x0d\x94\x7e\xb4\x97\xed\x61\xf6\xad\x14\xab\xc6\xd4\xa0\x90\xfd\xe6\xea\xd9\x42\xaa\x8d\x62\x55\x85\xb9\x6b\x6e\x4f\x1e\x72\x48\x0e\x86\x96\xfb\x98\x69\x9a\xfa\xb6\x6c\x99\xc8\x4b\x67\x61\x2b\xa9\x50\x57\x40\xcb\x25\xbd\x43\x5d\x49\xa1\x71\xa5\xb8\x41\x35\x03\x85\x5f\xe1\x95\x97\x7c\xad\x51\x9b\x64\xf4\xda\x27\xe1\x5d\x2d\xdf\xdf\xdf\xdf\x5a\x77\xd6\xb4\x7f\xcd\x2e\xa8\x31\xd5\x80\xd4\xfa\x74\xc7\xc1\xe1\x79\x9e\xab\x85\x5d\x68\x8b\xd3\x93\x93\x9f\x4f\xa2\x61\x2a\xbe\x77\x90\x17\xce\xd0\x9f\xde\x12\x78\x9f\x4c\x32\xeb\x83\xfd\x80\x20\x7a\x42\x90\xd5\xa1\x9a\x9e\x24\x47\xfc\x18\x10\xfb\x09\x73\x2e\x5c\xb2\xf1\xbf\xa0\x0b\xf5\xea\x3f\x50\x26\x38\x7c\x09\x04\xc7\x9f\x01\x93\xbc\xfa\xba\x64\xe6\x91\xa0\xfa\xcf\x81\xf4\x37\x96\xed\x0a\x45\x73\x36\x4e\xc6\x3a\x33\xc8\x98\xc8\xb0\x1c\xeb\xae\xb8\xd9\x5e\xd8\xdb\x38\x33\x8f\x83\x7a\x8e\x1b\x54\x5e\x3f\x1e\x2d\xa3\x7d\x6d\x43\xf9\x8f\x88\xc3\x8c\xfa\xa3\x7e\x1c\xc5\x92\x95\x19\x91\x3b\xbd\xe4\xac\xf4\xec\xb6\x67\x8a\xf9\x41\x68\xcc\x6a\x85\x71\xd2\x1d\xcc\x7c\xc5\xdb\x16\xdc\xfc\x9a\x8c\x34\x98\xcc\x34\x38\x0c\xb5\x9e\x05\x4a\xee\xaf\x44\x5e\x49\x2e\x4c\x6c\x73\xdd\xd7\x8f\x33\xc7\xa1\xd3\x37\x91\xe5\xbf\x4e\x8e\x77\xea\x8b\x6f\xed\xd4\x49\x13\x9b\x71\xfb\xfa\x01\x3c\xee\xe0\xb0\x0c\x27\x0b\xf0\xf9\x34\x72\x2d\x9c\x72\x6d\xf1\xcb\x49\x94\x84\xff\x1c\xd8\x19\xf9\xb0\x96\xfc\x47\x5c\xb4\x9e\x6c\xce\x89\x7f\x6f\x53\x1a\x35\x85\x1d\xa5\x71\x12\x76\xe1\xdf\x01\x00\x00\xff\xff\xa2\xab\x28\xe6\x99\x0b\x00\x00")

func cmdNameMain_goBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMain_go,
		"cmd/{{.Name}}/main_go",
	)
}

func cmdNameMain_go() (*asset, error) {
	bytes, err := cmdNameMain_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/{{.Name}}/main_go", size: 2969, mode: os.FileMode(436), modTime: time.Unix(1502366422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentDeploymentYamlTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\x9b\x40\x10\xc5\xef\x7c\x8a\x39\xe4\x4a\x63\x0e\x89\xa2\xbd\xa5\x04\xb9\x6e\xeb\x18\xad\x51\xa2\x9e\xac\x65\x3d\x4d\x56\xdd\x7f\x5a\x46\x4e\x23\xc4\x77\xaf\x00\x3b\x86\x06\x27\xde\xd3\x6a\x67\xe6\xc7\xe3\xcd\xfb\xa3\xec\x96\xc1\x1a\xc3\x4e\x49\x8c\x84\x57\x0f\x18\x2a\xe5\x2c\x83\x5d\x12\x19\x24\xb1\x15\x24\x58\x04\x60\x85\x41\x06\x17\xf5\x3a\xe3\x0f\x8b\x34\x6b\xa2\xca\xa3\x6c\x0b\x15\x6a\x94\xe4\x42\x7b\x07\x10\xde\x8f\xba\x00\xbc\x0b\x54\xf5\xc5\x78\x4f\x79\x0a\x5e\x76\x0f\x00\x3e\x38\x72\xd2\x69\x06\x45\x9a\x1f\xde\x5c\x20\x06\x57\xb3\xd9\x55\xd2\xbd\xd4\xb5\xfa\x0d\x5f\x1e\xb1\xe4\x79\xda\x34\x43\x48\xfc\x82\xe5\x39\xa0\xeb\x59\x5d\xa3\xdd\x36\xcd\x80\x37\x17\x84\x2f\xe2\xf5\x08\x7c\x26\xf2\x9f\xc2\x6e\xde\x48\x71\x1c\x8f\xfc\xc2\xbf\x84\xb6\xbd\x56\x97\xbb\xa4\x44\x12\x49\xd4\x9b\x7b\x87\x5e\xbb\x57\x83\x96\x3e\x36\x14\x40\x8b\x12\xf5\xde\x2b\xe9\x8c\x51\xd4\x36\x3c\x66\x3c\xfd\x91\xf1\xcd\x7c\x51\x6c\xd2\xd5\x72\xb9\x28\x8e\xe6\x07\xf4\x5a\x49\x51\x31\x48\xde\xad\xc2\x08\x92\xcf\x3f\x07\xc8\xa9\xed\x10\x1a\xaf\x05\xe1\x7e\x64\xa0\xaf\x3d\x7a\x34\x3d\x35\xdf\x9f\x8f\xc5\xb6\x1d\x07\xc1\x7d\xb7\x25\xa1\x2c\x86\x37\x72\x3c\xe5\x46\x7f\x94\x11\x4f\x5d\xe5\x6e\xd5\x81\x79\x36\x5f\xac\x0b\xfe\xab\xb9\xbc\xa8\x73\xbe\xfa\x9e\xa5\xc5\xe6\xfe\x76\x99\x35\xf1\x71\x98\x8d\x75\x7c\xe5\xb7\xf7\xe9\xb7\xb6\xe1\x94\xba\xc3\x7e\x07\xbf\x3a\x91\xd5\x91\xf6\xfc\xbf\x90\x9e\x0e\xce\x99\x01\x9e\xa6\x5f\xcf\x4e\xd1\x87\x89\x3e\x2f\xd5\x13\x5f\xb8\xf9\x14\xff\x2f\x00\x00\xff\xff\x66\x9b\xad\xab\x21\x04\x00\x00")

func deploymentDeploymentYamlTemplateBytes() ([]byte, error) {
	return bindataRead(
		_deploymentDeploymentYamlTemplate,
		"deployment/deployment.yaml.template",
	)
}

func deploymentDeploymentYamlTemplate() (*asset, error) {
	bytes, err := deploymentDeploymentYamlTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployment/deployment.yaml.template", size: 1057, mode: os.FileMode(436), modTime: time.Unix(1502366422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _protobufProtoProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x31\x4f\xc3\x40\x0c\x85\x77\xff\x8a\xa7\x4c\xed\x92\x08\x18\x4f\x19\x51\x37\x16\x10\xfb\x35\xb8\x91\x45\x72\x77\xba\x73\x81\xe8\xf0\x7f\x47\x69\x09\x42\x1d\x6d\xbf\xef\xbd\xe7\xb2\x04\xf5\x5f\xe8\xd1\xa4\x1c\x35\x3e\x34\x8e\x28\xf9\xe1\xdd\x8f\x8c\x5a\xdb\x27\x3f\xb3\x99\x23\x92\x39\xc5\xac\x68\xc6\x18\xc7\x89\xbb\x8b\xf8\x78\x3e\x75\x3c\x27\x5d\xda\xcb\xd8\x38\xaa\x15\x72\x42\x7b\xf0\xca\x9f\x7e\x81\xd9\x0d\xe6\x93\x74\x3e\x84\xa8\x5e\x25\x86\xb2\x71\xb5\x72\x78\x33\x23\x2a\x9c\x3f\x64\xf8\x4b\xc6\x37\x5e\x44\x27\x36\x7b\xde\x0e\x04\x00\x39\x0d\x38\xb0\xbe\x72\x2e\x12\x03\x76\x57\xf7\x76\x2b\xd5\x3e\xae\xa5\xf6\xc8\xac\xe7\x1c\x0a\x76\xbf\xc2\x3d\xaa\x91\x11\xcd\x5c\xca\xfa\xdf\xc6\x5f\x4d\x8b\x66\x09\x23\xc2\x9a\xdb\xe3\xce\xfd\x5f\x16\xf5\x47\x99\x44\x17\xf4\xb8\x77\x64\x3f\x01\x00\x00\xff\xff\x7e\x99\x34\xc8\x36\x01\x00\x00")

func protobufProtoProtoBytes() ([]byte, error) {
	return bindataRead(
		_protobufProtoProto,
		"protobuf/proto.proto",
	)
}

func protobufProtoProto() (*asset, error) {
	bytes, err := protobufProtoProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "protobuf/proto.proto", size: 310, mode: os.FileMode(436), modTime: time.Unix(1502366422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _service_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x41\x8f\x9b\x30\x10\x85\xef\xfe\x15\x4f\x1c\x2a\x88\x10\xde\x5e\x73\xab\xaa\xaa\xda\xcb\x5e\xb6\xea\xb5\x32\xce\x40\xdc\xc2\x18\xd9\x43\x13\x94\xf2\xdf\x2b\xc0\x1b\xb4\xd9\x93\xa5\x79\x9a\xf7\x7d\xb2\x3d\x18\xfb\xc7\xb4\x84\xdb\xad\x7a\x31\x3d\xcd\xb3\x52\xae\x1f\x7c\x10\xe4\x0a\x00\xb2\xd6\x77\x86\xdb\xca\x87\x56\x5f\x35\x93\x68\xeb\x59\xe8\x2a\xd9\x1a\xb7\xde\xb7\x1d\xfd\x1a\x82\x17\x5f\x8f\x0d\xb2\xd6\xc9\x79\xac\x2b\xeb\x7b\xbd\x6d\xea\xb7\x4c\x0f\x32\x0d\x14\x35\xf5\x83\x4c\x99\x2a\x94\xd2\x1a\xcf\x89\x8b\x7f\xf8\xe1\xa4\xa3\x79\xfe\x62\x2d\xc5\x88\x40\x43\xa0\x48\x2c\x11\x86\xe1\x58\x28\x34\xc6\x12\xe4\x6c\x04\x4c\x74\x8a\x10\x8f\x9a\x10\x8d\xb8\xd8\x38\x3a\x2d\x75\x8d\x0f\x30\x3c\xe1\x64\xc4\xc0\x6c\x4d\x63\xa4\x13\xea\x09\x72\x26\xbc\x52\xf8\xeb\x2c\xa9\xc5\x04\xcf\x09\xb5\x97\xdf\x94\x9a\x57\xad\x0f\x56\x8f\x3e\xfd\xd0\x51\x4f\x2c\x46\x9c\x67\xf8\x66\x6d\x8f\x5b\xfb\x5e\xb8\x71\x12\x14\x51\xc2\x68\x05\xb7\xf5\xe2\x92\x5c\x72\x48\xd8\x17\xba\x7c\x24\xdb\x40\x46\x28\xc2\x80\xe9\x72\x67\xf8\xfa\x37\x59\x51\xcd\xc8\x76\x59\x4b\x8c\xfc\x7d\x6d\x81\xc3\x1b\x7c\xa3\x06\x92\x31\x30\x3e\xa5\xe9\x36\xdc\x75\x8e\xe9\x2c\xd7\xf9\xbc\x58\xad\x80\x3c\xde\x8b\x0a\x7c\x27\xf9\x49\x21\x3a\xcf\xb9\x95\x2b\xd2\x77\xa8\xbe\x6e\x67\x09\xc7\x38\x3c\x7c\x8b\xea\xdb\xf2\xe6\x05\xf2\x43\xda\x2c\x41\x21\xf8\x50\x3c\x68\xa5\x74\xd7\x5a\xae\xe2\x88\xec\x73\xf5\x54\x3d\x65\xe5\x7d\xfc\x2a\xa6\x76\x9d\x93\xe9\x88\x8c\xe9\x92\x92\xb9\x04\xbb\x4e\xcd\xea\x7f\x00\x00\x00\xff\xff\xe4\x48\x53\x93\xd4\x02\x00\x00")

func service_goBytes() ([]byte, error) {
	return bindataRead(
		_service_go,
		"service_go",
	)
}

func service_go() (*asset, error) {
	bytes, err := service_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service_go", size: 724, mode: os.FileMode(436), modTime: time.Unix(1502117101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _service_test_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcd\x4e\xc3\x30\x10\x84\xcf\xd9\xa7\x18\xe5\x64\x47\x28\x79\x02\x0e\x48\x9c\x7b\xa0\x79\x81\x60\x6d\x53\x0b\xf2\x23\x7b\x4d\x54\x05\xbf\x3b\xb2\x9b\x52\x71\x89\xe8\x6d\x3d\x9e\x99\x4f\x5e\xcf\x9d\xf9\xe8\x7a\xc6\xba\xd6\x87\x6e\xe0\x18\x89\xec\x30\x4f\x4e\xa0\xa8\x28\x7b\x2b\xe7\xf0\x5e\x9b\x69\x68\xbc\x38\x16\x73\x76\x8d\xb0\x17\x7b\xba\x34\x3e\x58\xe1\x92\x00\xa0\xcc\xda\xd8\x97\xa4\x89\xe4\x32\xff\xd6\xe1\x1b\xad\x95\x4f\x8e\xf1\xc8\xee\xcb\x1a\x3e\xa6\x10\xbc\xb8\x60\x04\x2b\x15\xb9\xa4\xce\x2a\x51\xe1\xaf\x26\x54\x9b\x9b\x8a\xce\x18\xf6\x1e\xa8\x5e\xf2\x40\x91\xe8\x14\x46\x03\xe5\x51\xed\x32\x34\x8e\x2c\x61\xce\xb3\xd2\x19\x55\x6f\x65\xcf\x38\xf0\x72\xed\x53\x3a\xe9\x37\x6c\xbe\xd8\x4a\xd4\xcd\xae\x1f\x66\xb6\xec\x25\x23\x53\xb2\x69\x90\xce\xff\x6e\xf8\x13\xce\xa1\xa4\xec\x86\x94\xa0\xda\x3e\xa0\x6e\xf5\x7d\xab\x6f\x61\x54\xf2\x84\x91\x17\xb5\x0f\x7d\xe8\x89\x2d\x77\xee\x75\x5a\xc6\xfb\x66\x29\xd2\x4f\x00\x00\x00\xff\xff\x05\x7e\xd3\xce\x46\x02\x00\x00")

func service_test_goBytes() ([]byte, error) {
	return bindataRead(
		_service_test_go,
		"service_test_go",
	)
}

func service_test_go() (*asset, error) {
	bytes, err := service_test_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service_test_go", size: 582, mode: os.FileMode(436), modTime: time.Unix(1502377957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"access_go": access_go,
	"access_test_go": access_test_go,
	"cmd/{{.Name}}/main_go": cmdNameMain_go,
	"deployment/deployment.yaml.template": deploymentDeploymentYamlTemplate,
	"protobuf/proto.proto": protobufProtoProto,
	"service_go": service_go,
	"service_test_go": service_test_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"access_go": &bintree{access_go, map[string]*bintree{}},
	"access_test_go": &bintree{access_test_go, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"{{.Name}}": &bintree{nil, map[string]*bintree{
			"main_go": &bintree{cmdNameMain_go, map[string]*bintree{}},
		}},
	}},
	"deployment": &bintree{nil, map[string]*bintree{
		"deployment.yaml.template": &bintree{deploymentDeploymentYamlTemplate, map[string]*bintree{}},
	}},
	"protobuf": &bintree{nil, map[string]*bintree{
		"proto.proto": &bintree{protobufProtoProto, map[string]*bintree{}},
	}},
	"service_go": &bintree{service_go, map[string]*bintree{}},
	"service_test_go": &bintree{service_test_go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

