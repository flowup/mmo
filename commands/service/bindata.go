// Code generated by go-bindata.
// sources:
// commands/service/template/access_go
// commands/service/template/cmd/{{.Name}}/main_go
// commands/service/template/deployment/deployment.yaml.template
// commands/service/template/protobuf/proto.proto
// commands/service/template/service_go
// DO NOT EDIT!

package service

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _access_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x41\x4e\xc4\x30\x0c\x05\xd0\xbd\x4f\xf1\x57\x08\x58\x30\x67\xe0\x02\xb3\xe2\x02\x26\xf3\x87\x29\xb4\x69\xe4\x38\xaa\x50\xc8\xdd\x51\x9b\xb0\x42\xb3\x4c\xec\xff\xfc\x93\x86\x2f\xfd\x20\x6a\x7d\x39\xeb\xc2\xd6\x44\x4e\xa7\xbf\x17\x7e\xf0\x36\xf9\xcc\xd6\x5e\x43\x60\xce\x30\x26\x63\x66\xf4\x0c\x45\x76\x2b\xc1\x8b\x11\x7e\x53\xc7\xb4\xa4\x99\xcb\x31\xbb\xa8\x2b\xf4\x88\xec\xda\x75\x35\xf8\x8d\xff\x55\xf1\xef\x44\x0c\xbb\x73\xa8\x22\xbd\xc3\x99\xdb\xbd\x1a\xc1\xa8\xce\xbd\x43\xe4\x36\x0e\x61\x7d\xff\x64\x70\x68\xbc\xc0\xe8\xc5\x62\xc6\xe4\x72\x2d\x31\xec\x54\x4f\x3e\x3e\xe1\x79\x18\x55\x00\x8c\x4d\x3c\xf4\xcf\xda\xa4\xfd\x06\x00\x00\xff\xff\xe7\x9c\x3f\x60\x11\x01\x00\x00")

func access_goBytes() ([]byte, error) {
	return bindataRead(
		_access_go,
		"access_go",
	)
}

func access_go() (*asset, error) {
	bytes, err := access_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "access_go", size: 273, mode: os.FileMode(420), modTime: time.Unix(1500453568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdNameMain_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x80\x75\x52\xe1\xca\xdb\x1e\x3d\xf8\x21\xc8\x8f\xa5\x43\xe0\x04\x71\x00\x63\x28\x8a\x82\x96\xce\x32\x61\x99\xa7\x92\x54\x8c\x40\xd3\xff\x3e\x1c\x29\x59\x76\xb2\x16\x43\xfd\x62\x91\xc7\xfb\xee\xbb\xbb\x8f\xc7\x5a\xe6\x3b\x59\x22\xec\xa5\xd2\x42\xa8\x7d\x4d\xc6\x41\x22\x00\x00\x62\xb2\xb1\x88\x62\x8d\x8e\xff\xec\x8b\xce\xf9\xbf\x24\x2a\x2b\xcc\x4a\xaa\xa4\x2e\x33\x32\xe5\xb4\x34\xf5\x77\x2c\x53\x83\x9b\x0a\x73\xa7\x48\xc7\x22\x6a\x5b\xb5\x81\x6c\x85\xeb\xc7\x87\xcb\xae\x63\x27\xe5\xb6\xcd\x3a\xcb\x69\x3f\x55\xfb\xda\xd0\x5a\xae\x2b\xfc\x80\x3a\x38\x7f\x38\xe0\x7a\x5a\x92\xff\x3e\xe0\x3a\x0e\xbc\x34\xba\xe9\xd6\xb9\x3a\x2c\xdb\x16\x75\xd1\x75\xc2\x2f\x2a\x2a\xe1\x14\xd3\x2a\xd3\xd4\x16\xf5\xb4\xa2\xd2\x34\x36\x16\xbd\x0b\xb3\x58\xa2\x76\xe6\xa5\xeb\x02\xe8\x89\x13\x3e\xcb\xaa\xde\xd2\x5a\xc9\xde\xed\x8b\xf5\x47\xcf\xe3\xa5\x42\x6c\x1a\x9d\x83\xd2\xca\x25\x29\xb4\x43\xfc\x6c\x89\xee\x86\xcc\x5e\x3a\x87\x26\x79\xc7\x3b\x7f\x2d\xef\x17\xc7\xad\xb6\x4b\xc5\xe9\xd9\xfb\xc6\xd5\x8d\x4b\xc8\x66\x4b\x57\x50\xe3\xce\xad\x77\xf8\x8c\x55\xc2\x8b\x2b\x5c\x37\xa5\x5f\xa6\xdf\xcc\x62\x3a\x85\x8f\x5a\x39\xb8\xf3\xb4\xe1\xa0\xdc\x16\xc2\x01\x6f\x0e\x69\x5c\x59\x3d\x01\xda\xc1\x6c\x0e\x64\xb3\x3b\xa2\x5d\x53\x5f\xeb\xe7\x24\x5e\x5e\x2f\x9e\x1e\xff\xfe\x72\xb5\x5c\xc4\xa9\x3f\xaf\x36\x7c\x2e\x64\xc6\xbf\x2d\xd1\x6e\x02\x68\x0c\xfb\x9e\x95\x26\x5b\xe0\x21\x04\xba\x25\xda\x25\x27\x81\x3e\x7d\x66\xf2\x9e\xf7\x08\x34\x24\xf8\x20\xb5\xca\xbd\x6d\xf2\xc6\x76\x23\x9d\xac\xbe\x61\xbb\x36\x86\xcc\x2b\xdb\x50\xd6\x9e\x38\xb3\x9c\xcf\x41\xab\x0a\xce\xe3\x72\x12\xd9\x93\xda\x23\x35\x0e\xe6\xf0\xfb\xaf\xf0\x1e\x9c\xda\x63\xb6\xc4\x9c\x74\xf1\xf6\xec\xd2\xc9\x7c\xe7\x8c\xcc\xf1\x92\xf4\x46\x95\x8d\x91\xac\xe6\xec\x5a\xb3\x56\x61\x0e\xce\x34\xf8\x86\xe2\x45\x51\xf8\x52\x30\x44\x3a\x92\xf4\x5f\x1d\x60\x65\xf1\x84\x17\x3b\xac\xa4\xd1\x95\x4e\xe2\x05\xc1\xd8\x08\x38\x48\x0b\x1b\x6a\x74\x31\xe9\xbb\x07\x06\xf9\x8e\x2a\x5d\xc2\x81\xf4\x2f\x0e\x0e\x64\x76\x7d\xbf\xba\x33\x81\x76\xa2\x57\x28\xdf\xed\x24\x6d\x45\x54\x29\x7b\x6c\x9f\x46\x97\xdd\x29\xeb\x50\x27\xb1\xcb\xeb\x78\x02\x71\x9c\x8a\xa8\xaf\xdc\x4f\x43\xe5\xa2\xe8\xd8\x8b\x4d\x12\x6f\xa4\xaa\xb0\x00\x47\x50\x79\xd7\x19\xfc\xfc\x1c\x7b\xc8\x54\x44\x9d\x10\xd1\x74\x0a\xb9\x41\xe9\x10\x64\x51\x28\x2e\x93\xac\xc0\xa0\xa5\xc6\xe4\xc8\x99\x18\x70\x5b\x04\x8b\xe6\x59\xe5\x28\x22\x99\xe7\x68\x2d\xf3\x69\xdb\x6c\x21\xf7\xd8\x75\x2c\xa5\x0b\xbf\x9d\xf4\x1d\x1d\x41\xd9\x97\x67\x81\x07\x40\x23\x22\xef\xca\x3b\x41\x80\xbc\xc9\x5e\xcc\xc3\x60\xc9\x1c\x5f\x05\x1c\xc3\x3c\xf6\xf6\x7e\x07\xfe\x81\x27\xe5\x2a\xec\xba\x1e\xc6\x4e\xce\x39\x2d\x03\x44\x12\x28\xa7\xa9\x08\x61\x06\x18\x18\xe7\xdc\x10\x0d\x48\x43\xf9\xf8\x70\xd9\xb3\xcd\x44\x34\x9e\x39\x86\x4f\xec\x98\xa5\xda\x80\xd4\x2f\x47\x77\xae\xb6\x9d\xc0\x61\x4b\x15\x82\xac\x6b\xb0\x5b\x6a\xaa\xc2\xef\x8b\xe8\x50\x72\xee\xef\x78\x2e\x67\x2b\xa9\xdc\x9f\x86\x9a\xba\xed\xd8\xc0\xe2\x4b\x7e\xe3\x3a\x94\x04\x2c\x01\x3f\x9f\x42\x2b\x3f\xea\x0d\xb1\xcc\x96\x4e\x06\x15\x9d\x30\x04\xd2\x83\x0e\x06\x21\xcc\xe6\x60\x33\x5f\x91\xa4\x52\x36\xfd\xe3\xb5\x3a\xce\xe4\xc1\x8d\x98\xc1\x28\x12\x8f\x7a\xa6\x11\x2f\x12\x66\x78\x45\x1a\x13\x16\x8d\x6f\xd7\xab\x67\x41\x44\x54\x73\x91\x7c\x77\x3f\x7d\xee\xa7\x7f\x76\xef\x37\xdb\xe3\xa8\x5b\x19\x59\x9f\xca\x81\x43\x0e\xaf\xc6\xa0\x10\x3e\x7a\x30\xb2\xae\xb1\x08\x7d\x1d\x04\xc3\x80\x0c\x30\x76\xbb\x8f\x99\x65\x59\xdf\x91\xad\xd4\x45\x15\x3c\x7c\x11\x0d\xda\x1a\xf8\xe1\xc9\x1e\xd1\xd6\xa4\x2d\xae\x8c\x72\x68\x26\x60\xf0\x2b\xbc\xef\x2d\x5f\x1b\xb4\x2e\x3d\xb9\xdc\x67\xe1\x43\x2d\x6f\x9f\x9e\x1e\x3c\x9c\x77\x1d\x2e\x6f\x08\xea\x5c\x3d\x32\xf5\x98\x61\x39\x02\x5e\x14\x85\x99\xf9\x47\x2b\x1e\xc7\xdf\x6d\x20\x3b\x0b\x2e\xfd\xea\x86\x69\xf7\x69\xa4\x93\x21\xcc\x77\x54\x61\xcf\x54\xb1\x3a\xd6\xf1\xbf\x95\x31\x72\xed\x47\xc9\x85\x0e\x69\x26\xff\x43\x28\xdc\xa5\x1f\x10\x4b\x74\x7c\xef\xd9\xc2\xc2\x4f\x52\xd1\x89\x7f\x03\x00\x00\xff\xff\x6a\x43\xf4\xab\xc8\x08\x00\x00")

func cmdNameMain_goBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMain_go,
		"cmd/{{.Name}}/main_go",
	)
}

func cmdNameMain_go() (*asset, error) {
	bytes, err := cmdNameMain_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/{{.Name}}/main_go", size: 2248, mode: os.FileMode(420), modTime: time.Unix(1500453664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentDeploymentYamlTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x8f\xa2\x40\x10\xbd\xf3\x2b\xea\xe0\x95\x15\x0e\x7a\xe8\xdb\x06\x89\x61\x77\x5d\x09\x12\xcd\x9e\x4c\xd3\xd6\xba\x9d\xed\xaf\x34\x1d\x67\x26\x84\xff\x3e\x01\x64\x84\x19\x34\xd6\xa9\x53\x55\xef\xe5\xd5\xeb\xf7\x9f\xab\x13\x81\x1d\xda\x0b\x67\xe8\x51\xc3\xf7\x68\x4b\xae\x15\x81\x4b\xe8\x49\x74\xf4\x44\x1d\x25\x1e\x80\xa2\x12\x09\xcc\xaa\x5d\x9c\xed\x93\x28\xae\xbd\xd2\x20\x6b\x06\x25\x0a\x64\x4e\xdb\xe6\x0d\x40\x8d\x19\x6d\x01\x18\x6d\x5d\xd9\x0d\xfd\x2b\xcb\xd9\x1a\xd6\x36\x00\x8c\xd5\x4e\x33\x2d\x08\xe4\x51\xda\xf7\xb4\x75\x04\x16\x41\xb0\x08\xdb\x4e\x55\xf1\xbf\xf0\xed\x80\x45\x96\x46\x75\x3d\x24\xf1\x5f\xb0\x78\x86\x68\x19\x54\x15\xaa\x53\x5d\x7b\xbe\xef\x8f\xae\xc4\x57\x87\xaa\x79\x96\xf3\x4b\x58\xa0\xa3\xa1\xd7\x59\xb2\x42\x23\xf4\x9b\x44\xe5\x1e\xdb\x00\x20\x68\x81\xe2\x7a\x21\xd3\x52\x72\xd7\x2c\x1c\xe2\x2c\xfa\x19\x67\xc7\x75\x92\x1f\xa3\xed\x66\x93\xe4\x37\xcb\x2c\x1a\xc1\x19\x2d\x09\x84\x5f\x0c\x94\xd4\xb1\x7f\xbf\x06\x94\x53\x9e\x3a\x94\x46\x50\x87\x57\xc8\x40\x5f\x53\x62\x84\x9e\xc2\x77\xf5\x58\x6c\xb3\xd1\x0b\xee\xb6\x95\xa3\x5c\xa1\xfd\x60\xf6\xa7\xdc\xe8\x8a\x4b\x7a\x6e\x27\xab\x6d\x4b\x9c\xc5\xeb\x64\x97\x67\x7f\xea\xf9\xac\x4a\xb3\xed\x8f\x38\xca\x8f\xbf\xbf\x6f\xe2\xda\xbf\x81\xc9\x7d\x1d\xfd\x67\x0e\x8e\x9a\xc8\xd2\x48\x65\xfa\x29\x44\xf7\x53\xf2\x64\xc0\xa6\xd9\x97\xc1\x3d\xf6\x3e\x71\xef\x01\x00\x00\xff\xff\x34\x54\x82\x42\x62\x03\x00\x00")

func deploymentDeploymentYamlTemplateBytes() ([]byte, error) {
	return bindataRead(
		_deploymentDeploymentYamlTemplate,
		"deployment/deployment.yaml.template",
	)
}

func deploymentDeploymentYamlTemplate() (*asset, error) {
	bytes, err := deploymentDeploymentYamlTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployment/deployment.yaml.template", size: 866, mode: os.FileMode(420), modTime: time.Unix(1500391709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _protobufProtoProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xbb\x6a\x03\x31\x10\x45\xfb\xf9\x8a\xcb\x56\x76\x23\x93\xa4\x14\x5b\x86\x74\x29\xd3\xcb\xcb\x44\x88\x58\x0f\x66\xc6\x21\x8b\xd0\xbf\x87\xf5\x03\xb6\x9c\xe1\x9c\xc3\xd5\xb5\x58\xf8\xc3\x8c\xa9\x49\xb5\xfa\x36\x79\xa2\x16\x96\x9f\x10\x19\xbd\xbb\xcf\x90\x79\x0c\x4f\x94\x72\xab\x62\x98\x62\xad\xf1\xc2\xa7\x1b\x7c\xbe\x7e\x9f\x38\x37\x5b\xdd\xed\xdc\x54\x65\xf9\x4d\xcb\x4e\x45\x27\x00\x90\xb6\xe0\x83\xed\x8b\x45\x53\x2d\x38\xdc\x33\xee\x99\x71\xef\x5b\xe6\x08\x61\xbb\x4a\x51\x1c\x1e\xe0\x11\x7d\xd0\x20\xca\xac\xba\x2d\x7a\xfa\xf7\xa8\x9a\xa4\x12\x51\x42\x66\xcc\x78\xf1\xfb\xa7\x5a\x38\xa7\x4b\xb2\x15\x33\x5e\x3d\x8d\xff\x00\x00\x00\xff\xff\x17\x04\x83\x0e\xe8\x00\x00\x00")

func protobufProtoProtoBytes() ([]byte, error) {
	return bindataRead(
		_protobufProtoProto,
		"protobuf/proto.proto",
	)
}

func protobufProtoProto() (*asset, error) {
	bytes, err := protobufProtoProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "protobuf/proto.proto", size: 232, mode: os.FileMode(420), modTime: time.Unix(1500453043, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _service_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x41\x8f\x9b\x30\x10\x85\xef\xfe\x15\x4f\x1c\x2a\x88\x10\xde\x5e\x73\xab\xaa\xaa\xda\xcb\x5e\xb6\xea\xb5\x32\xce\x40\xdc\xc2\x18\xd9\x43\x13\x94\xf2\xdf\x2b\xc0\x1b\xb4\xd9\x93\xa5\x79\x9a\xf7\x7d\xb2\x3d\x18\xfb\xc7\xb4\x84\xdb\xad\x7a\x31\x3d\xcd\xb3\x52\xae\x1f\x7c\x10\xe4\x0a\x00\xb2\xd6\x77\x86\xdb\xca\x87\x56\x5f\x35\x93\x68\xeb\x59\xe8\x2a\xd9\x1a\xb7\xde\xb7\x1d\xfd\x1a\x82\x17\x5f\x8f\x0d\xb2\xd6\xc9\x79\xac\x2b\xeb\x7b\xbd\x6d\xea\xb7\x4c\x0f\x32\x0d\x14\x35\xf5\x83\x4c\x99\x2a\x94\xd2\x1a\xcf\x89\x8b\x7f\xf8\xe1\xa4\xa3\x79\xfe\x62\x2d\xc5\x88\x40\x43\xa0\x48\x2c\x11\x86\xe1\x58\x28\x34\xc6\x12\xe4\x6c\x04\x4c\x74\x8a\x10\x8f\x9a\x10\x8d\xb8\xd8\x38\x3a\x2d\x75\x8d\x0f\x30\x3c\xe1\x64\xc4\xc0\x6c\x4d\x63\xa4\x13\xea\x09\x72\x26\xbc\x52\xf8\xeb\x2c\xa9\xc5\x04\xcf\x09\xb5\x97\xdf\x94\x9a\x57\xad\x0f\x56\x8f\x3e\xfd\xd0\x51\x4f\x2c\x46\x9c\x67\xf8\x66\x6d\x8f\x5b\xfb\x5e\xb8\x71\x12\x14\x51\xc2\x68\x05\xb7\xf5\xe2\x92\x5c\x72\x48\xd8\x17\xba\x7c\x24\xdb\x40\x46\x28\xc2\x80\xe9\x72\x67\xf8\xfa\x37\x59\x51\xcd\xc8\x76\x59\x4b\x8c\xfc\x7d\x6d\x81\xc3\x1b\x7c\xa3\x06\x92\x31\x30\x3e\xa5\xe9\x36\xdc\x75\x8e\xe9\x2c\xd7\xf9\xbc\x58\xad\x80\x3c\xde\x8b\x0a\x7c\x27\xf9\x49\x21\x3a\xcf\xb9\x95\x2b\xd2\x77\xa8\xbe\x6e\x67\x09\xc7\x38\x3c\x7c\x8b\xea\xdb\xf2\xe6\x05\xf2\x43\xda\x2c\x41\x21\xf8\x50\x3c\x68\xa5\x74\xd7\x5a\xae\xe2\x88\xec\x73\xf5\x54\x3d\x65\xe5\x7d\xfc\x2a\xa6\x76\x9d\x93\xe9\x88\x8c\xe9\x92\x92\xb9\x04\xbb\x4e\xcd\xea\x7f\x00\x00\x00\xff\xff\xe4\x48\x53\x93\xd4\x02\x00\x00")

func service_goBytes() ([]byte, error) {
	return bindataRead(
		_service_go,
		"service_go",
	)
}

func service_go() (*asset, error) {
	bytes, err := service_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service_go", size: 724, mode: os.FileMode(420), modTime: time.Unix(1500453708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"access_go": access_go,
	"cmd/{{.Name}}/main_go": cmdNameMain_go,
	"deployment/deployment.yaml.template": deploymentDeploymentYamlTemplate,
	"protobuf/proto.proto": protobufProtoProto,
	"service_go": service_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"access_go": &bintree{access_go, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"{{.Name}}": &bintree{nil, map[string]*bintree{
			"main_go": &bintree{cmdNameMain_go, map[string]*bintree{}},
		}},
	}},
	"deployment": &bintree{nil, map[string]*bintree{
		"deployment.yaml.template": &bintree{deploymentDeploymentYamlTemplate, map[string]*bintree{}},
	}},
	"protobuf": &bintree{nil, map[string]*bintree{
		"proto.proto": &bintree{protobufProtoProto, map[string]*bintree{}},
	}},
	"service_go": &bintree{service_go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

