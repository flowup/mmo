// Code generated by go-bindata.
// sources:
// commands/service/template/access_go
// commands/service/template/cmd/{{.Name}}/main_go
// commands/service/template/deployment/deployment.yaml.template
// commands/service/template/protobuf/proto.proto
// commands/service/template/service_go
// DO NOT EDIT!

package service

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _access_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x52\x42\x41\x10\x44\xf3\x39\x45\x47\x96\x26\x72\x06\x43\x13\x12\xbd\xc0\x38\x34\xb2\xca\x5f\xb6\x66\x67\xa5\xac\x75\xef\x6e\x01\x9f\x08\x7e\x38\xd5\x3d\xaf\x5f\x51\xfb\xd6\x4f\xa2\xf7\xe7\xb5\x4e\x1c\x43\x64\xb5\xba\x5e\xf8\xc3\x7b\x8a\x3d\xc7\x78\x31\x63\xad\x70\x16\x67\x65\x8e\x0a\x45\x0d\x6f\x16\xcd\x89\xd8\x69\x20\x4d\x65\xcf\xe9\x9c\x6d\x34\x14\x7a\x7e\x39\xd1\xb6\x07\x47\xec\x78\x4b\x7d\xa3\xff\x24\xa3\xc4\x6f\xb9\x93\xce\x9b\x97\x19\x74\x91\x8b\xdb\x9a\xc7\xa5\xaa\x39\x35\x78\x72\xcb\x3c\xce\x02\x38\x7c\x7c\xd1\x02\x9a\x37\x70\x46\xf3\x5c\x91\x42\xb6\x2d\xdb\x1d\x14\xae\xac\xc7\x27\xbc\x2e\xcd\x74\x01\x30\xc3\xf0\xb0\xd0\xea\x43\xc6\x7f\x00\x00\x00\xff\xff\x33\x1d\xc8\x5e\x5d\x01\x00\x00")

func access_goBytes() ([]byte, error) {
	return bindataRead(
		_access_go,
		"access_go",
	)
}

func access_go() (*asset, error) {
	bytes, err := access_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "access_go", size: 349, mode: os.FileMode(420), modTime: time.Unix(1500388904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdNameMain_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdf\x6f\xdb\x36\x10\x7e\x16\xff\x8a\x9b\x80\x75\x52\xe1\x52\xdb\x1e\x3d\xf8\xa1\xc8\x8f\xa5\x43\x90\x04\x76\x00\x63\x28\x8a\x82\x96\xce\x32\x61\x99\xa7\x92\x94\x8d\xc0\xd0\xff\x3e\x1c\x25\x59\x76\xb2\x16\xc3\xf2\x62\x91\xf7\xeb\xbb\xef\x3b\x5e\x6a\x95\x6f\x55\x89\xb0\x53\xda\x08\xa1\x77\x35\x59\x0f\x89\x00\x00\x88\xc9\xc5\x22\x8a\x0d\x7a\xfe\x71\x2f\x26\xe7\xdf\x92\xa8\xac\x50\x96\x54\x29\x53\x4a\xb2\x65\x56\xda\xfa\x07\x96\xcc\xe2\xba\xc2\xdc\x6b\x32\xb1\x88\x8e\x47\xbd\x06\xb9\xc4\xd5\xfc\xe9\xaa\x6d\x39\x48\xfb\x4d\xb3\x92\x39\xed\x32\xbd\xab\x2d\xad\xd4\xaa\xc2\x0f\x68\xba\xe0\x0f\x07\x5c\x65\x25\x85\xef\x03\xae\xe2\x0e\x97\x41\x9f\x6d\xbc\xaf\xbb\xe3\xf1\x88\xa6\x68\x5b\x11\x0e\x15\x95\x70\x9e\xd3\x69\xdb\xd4\x0e\x4d\x56\x51\x69\x1b\x17\x8b\x3e\x84\x51\x2c\xd0\x78\xfb\xd2\xb6\x5d\xd2\xb3\x20\xdc\xab\xaa\xde\xd0\x4a\xab\x3e\xec\xab\x0b\xae\x97\xf5\x52\x21\xd6\x8d\xc9\x41\x1b\xed\x93\x14\x8e\x43\x7d\xb9\x40\x7f\x4b\x76\xa7\xbc\x47\x9b\xbc\xe3\x9b\xbf\x16\x8f\x0f\xa7\xab\x63\x9b\x8a\x73\xdf\xc7\xc6\xd7\x8d\x4f\xc8\xc9\x85\x2f\xa8\xf1\x97\xd6\x7b\xdc\x63\x95\xf0\xe1\x1a\x57\x4d\x19\x8e\xe9\x77\xbb\xc8\x32\xf8\x64\xb4\x87\xfb\x00\x1b\x0e\xda\x6f\xa0\x73\x08\xe6\xae\x8d\x6b\x67\x26\x40\x5b\x98\xce\x80\x9c\xbc\x27\xda\x36\xf5\x8d\xd9\x27\xf1\xe2\xe6\xe1\x79\xfe\xf7\xd7\xeb\xc5\x43\x9c\x06\x7f\xbd\x66\xbf\xae\x33\xfe\xdb\x10\x6d\x27\x80\xd6\x72\xec\x05\x35\xf2\x01\x0f\x5d\xa1\x3b\xa2\x6d\x72\x56\xe8\xf3\x17\x06\x1f\x70\x8f\x89\x86\x06\x9f\x94\xd1\x79\xb0\x4d\xde\xd8\x6e\x95\x57\xd5\x77\x6c\x37\xd6\x92\x7d\x65\x1b\x68\xed\x81\x33\xca\xd9\x0c\x8c\xae\xe0\xb2\x2e\x37\x21\x9f\xf5\x0e\xa9\xf1\x30\x83\xdf\x7f\x85\xf7\xe0\xf5\x0e\xe5\x02\x73\x32\xc5\x5b\xdf\x85\x57\xf9\xd6\x5b\x95\xe3\x15\x99\xb5\x2e\x1b\xab\x78\x9a\xe5\x8d\xe1\x59\x85\x19\x78\xdb\xe0\x1b\x88\x1f\x8b\x22\x50\xc1\x29\xd2\x11\x64\xf8\x6a\x01\x2b\x87\x67\xb8\x38\x60\xa9\xac\xa9\x4c\x12\x3f\x10\x8c\x42\xc0\x41\x39\x58\x53\x63\x8a\x49\xaf\x1e\x58\xe4\x37\xaa\x4d\x09\x07\x32\xbf\x78\x38\x90\xdd\xf6\x7a\xb5\x17\x03\xda\x8a\x7e\x42\xf9\x6d\x27\xe9\x51\x44\x95\x76\x27\xf9\x0c\x7a\x79\xaf\x9d\x47\x93\xc4\x3e\xaf\xe3\x09\xc4\x71\x2a\xa2\x9e\xb9\x9f\x06\xe6\xa2\xe8\xa4\xc5\x3a\x89\xd7\x4a\x57\x58\x80\x27\xa8\x42\xe8\x14\x7e\xde\xc7\x21\x65\x2a\xa2\x56\x88\xc8\x71\x6a\x7e\xad\xdd\x40\xd8\x3d\xda\x24\x15\x22\xca\x32\x98\x63\xc9\x31\x16\xc6\x85\x00\x0e\xed\x5e\xe7\x08\x64\xa0\x9c\x3f\x5d\x85\x33\x5a\x29\xa2\xd1\x47\x0e\x71\x89\xeb\x05\xce\x32\xd6\x57\x99\x97\x53\x38\xc3\x72\x13\x38\x6c\xa8\x42\x50\x75\x0d\x6e\x43\x4d\x55\x84\x7b\x11\x1d\x4a\x06\xf5\x8e\x17\x98\x5c\x2a\xed\xff\xb4\xd4\xd4\xc7\x96\x0d\xac\x52\xf2\x1b\x03\x2c\x09\x98\xab\xf0\x90\xbb\x9e\x3f\x99\x35\xb1\x1e\x0b\xaf\x3a\xba\xcf\x10\x02\x99\x81\xb0\x81\xb1\xe9\x0c\x9c\x0c\x1d\x27\x95\x76\xe9\x1f\xaf\x69\xbc\xe0\x91\x19\x9a\xc2\xc8\x66\xc8\x7a\x41\x66\x60\x93\x11\x5e\x93\xc1\x84\xd9\x0d\x3c\xbe\xda\x9f\x22\xa2\x9a\x49\x0a\xb4\x7f\xfe\xd2\xaf\x49\xf9\x18\x2e\x8f\xa7\x9d\xb0\xb4\xaa\x0e\xaa\x0c\xf0\x3d\xc1\xb0\x5e\xfb\xab\xe0\x7a\xb0\xaa\xae\xb1\xe8\x74\x1b\x94\xe4\x84\x9c\xa0\x57\xd3\x4d\xa0\xaf\x29\xa5\xec\x15\xd9\x28\x53\x54\x5d\x44\x20\xd1\xa2\xab\x81\x37\xb4\x9c\xa3\xab\xc9\x38\x5c\x5a\xed\xd1\x4e\xc0\xe2\x37\x78\xdf\x5b\xbe\x35\xe8\x7c\x7a\xf6\x0a\x2e\xca\x77\x5c\xde\x3d\x3f\x3f\x85\x74\x21\x74\x98\xf2\xae\xa8\xf7\xf5\x88\x34\xe4\xec\x8e\x63\xc2\x8f\x45\x61\xa7\x61\xbb\xc7\xe3\x9e\xb8\xeb\xc0\x4e\xbb\x90\xfe\x74\xcb\xb0\xfb\x36\xd2\xc9\x50\xe6\x07\x53\xe1\x2e\xa6\x62\x79\xe2\xf1\xdf\x27\x63\xc4\xda\xbf\xb9\x8f\xa6\x6b\x33\xf9\x0f\x83\xc2\x2a\xfd\x8f\x61\x89\x4e\xff\x18\xd9\xc2\x83\x9f\xa4\xa2\x15\xff\x04\x00\x00\xff\xff\x0d\xfe\xef\xad\xf1\x07\x00\x00")

func cmdNameMain_goBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMain_go,
		"cmd/{{.Name}}/main_go",
	)
}

func cmdNameMain_go() (*asset, error) {
	bytes, err := cmdNameMain_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/{{.Name}}/main_go", size: 2033, mode: os.FileMode(420), modTime: time.Unix(1500388904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentDeploymentYamlTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x8f\xa2\x40\x10\xbd\xf3\x2b\xea\xe0\x95\x15\x0e\x7a\xe8\xdb\x06\x89\x61\x77\x5d\x09\x12\xcd\x9e\x4c\xd3\xd6\xba\x9d\xed\xaf\x34\x1d\x67\x26\x84\xff\x3e\x01\x64\x84\x19\x34\xd6\xa9\x53\x55\xef\xe5\xd5\xeb\xf7\x9f\xab\x13\x81\x1d\xda\x0b\x67\xe8\x51\xc3\xf7\x68\x4b\xae\x15\x81\x4b\xe8\x49\x74\xf4\x44\x1d\x25\x1e\x80\xa2\x12\x09\xcc\xaa\x5d\x9c\xed\x93\x28\xae\xbd\xd2\x20\x6b\x06\x25\x0a\x64\x4e\xdb\xe6\x0d\x40\x8d\x19\x6d\x01\x18\x6d\x5d\xd9\x0d\xfd\x2b\xcb\xd9\x1a\xd6\x36\x00\x8c\xd5\x4e\x33\x2d\x08\xe4\x51\xda\xf7\xb4\x75\x04\x16\x41\xb0\x08\xdb\x4e\x55\xf1\xbf\xf0\xed\x80\x45\x96\x46\x75\x3d\x24\xf1\x5f\xb0\x78\x86\x68\x19\x54\x15\xaa\x53\x5d\x7b\xbe\xef\x8f\xae\xc4\x57\x87\xaa\x79\x96\xf3\x4b\x58\xa0\xa3\xa1\xd7\x59\xb2\x42\x23\xf4\x9b\x44\xe5\x1e\xdb\x00\x20\x68\x81\xe2\x7a\x21\xd3\x52\x72\xd7\x2c\x1c\xe2\x2c\xfa\x19\x67\xc7\x75\x92\x1f\xa3\xed\x66\x93\xe4\x37\xcb\x2c\x1a\xc1\x19\x2d\x09\x84\x5f\x0c\x94\xd4\xb1\x7f\xbf\x06\x94\x53\x9e\x3a\x94\x46\x50\x87\x57\xc8\x40\x5f\x53\x62\x84\x9e\xc2\x77\xf5\x58\x6c\xb3\xd1\x0b\xee\xb6\x95\xa3\x5c\xa1\xfd\x60\xf6\xa7\xdc\xe8\x8a\x4b\x7a\x6e\x27\xab\x6d\x4b\x9c\xc5\xeb\x64\x97\x67\x7f\xea\xf9\xac\x4a\xb3\xed\x8f\x38\xca\x8f\xbf\xbf\x6f\xe2\xda\xbf\x81\xc9\x7d\x1d\xfd\x67\x0e\x8e\x9a\xc8\xd2\x48\x65\xfa\x29\x44\xf7\x53\xf2\x64\xc0\xa6\xd9\x97\xc1\x3d\xf6\x3e\x71\xef\x01\x00\x00\xff\xff\x34\x54\x82\x42\x62\x03\x00\x00")

func deploymentDeploymentYamlTemplateBytes() ([]byte, error) {
	return bindataRead(
		_deploymentDeploymentYamlTemplate,
		"deployment/deployment.yaml.template",
	)
}

func deploymentDeploymentYamlTemplate() (*asset, error) {
	bytes, err := deploymentDeploymentYamlTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deployment/deployment.yaml.template", size: 866, mode: os.FileMode(420), modTime: time.Unix(1500388891, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _protobufProtoProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xae\xcc\x2b\x49\xac\x50\xb0\x55\x50\x2a\x28\xca\x2f\xc9\x37\x56\xb2\xe6\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xb5\xe6\xe2\x2a\x4e\x2d\x2a\xcb\x4c\x46\x12\x53\xa8\xe6\xe2\xaa\x05\x04\x00\x00\xff\xff\x48\x81\x80\x06\x3e\x00\x00\x00")

func protobufProtoProtoBytes() ([]byte, error) {
	return bindataRead(
		_protobufProtoProto,
		"protobuf/proto.proto",
	)
}

func protobufProtoProto() (*asset, error) {
	bytes, err := protobufProtoProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "protobuf/proto.proto", size: 62, mode: os.FileMode(420), modTime: time.Unix(1500380106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _service_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\x54\x08\x10\xe2\x7a\x3a\x4a\x9a\x6b\xe0\x07\x36\xce\x84\x33\x5c\x9c\xc8\xbb\xe1\x14\x05\xff\x3b\x22\x0e\x87\x04\x32\x54\x51\xec\xd9\x79\x6f\x3d\x8a\x7f\x95\x67\x62\x59\x6e\xf7\xd2\x33\x67\xe7\x76\x3b\x3c\x6c\xbf\x78\xc7\x53\xb0\x23\x73\xbe\xf7\x9e\xaa\x48\x1c\x13\x95\xd1\x14\x12\x11\xa2\x31\x75\xe2\x09\x3b\x88\x21\x92\xad\xc2\x06\x34\x84\x8a\x05\xed\x02\xdb\xcf\xba\x6e\x48\x90\x38\xa3\x15\x13\x48\x69\x9a\x94\x2d\x9a\x19\x76\x20\x1e\x99\xde\x82\xa7\xb3\x79\x64\x95\xbd\x8a\xfd\xba\xdb\x46\x7f\x8a\xf5\xe3\x91\x3d\xa3\x89\x85\x21\x62\xe8\x56\x8c\x6e\xd9\xb3\x76\x01\x56\x3b\xd5\xd2\xe4\x0d\x8b\x03\xf0\xa5\x5d\xb5\x2b\x0f\xb7\xe7\xa9\x5a\xe7\x13\xc5\xa8\x10\x44\x9e\xce\x32\x43\xf3\x42\x6f\xae\x9b\xa2\xff\x6b\xfa\xf2\x1f\xfe\x15\xae\xab\xe0\xb2\x40\xa2\x4d\x29\xe2\xa2\x16\x2b\xa9\xef\x55\xef\xb6\xef\xcd\x7a\x9e\x5d\x76\x1f\x01\x00\x00\xff\xff\x3c\xdb\x93\x80\x2c\x02\x00\x00")

func service_goBytes() ([]byte, error) {
	return bindataRead(
		_service_go,
		"service_go",
	)
}

func service_go() (*asset, error) {
	bytes, err := service_goBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service_go", size: 556, mode: os.FileMode(420), modTime: time.Unix(1500388904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"access_go":                           access_go,
	"cmd/{{.Name}}/main_go":               cmdNameMain_go,
	"deployment/deployment.yaml.template": deploymentDeploymentYamlTemplate,
	"protobuf/proto.proto":                protobufProtoProto,
	"service_go":                          service_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"access_go": &bintree{access_go, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"{{.Name}}": &bintree{nil, map[string]*bintree{
			"main_go": &bintree{cmdNameMain_go, map[string]*bintree{}},
		}},
	}},
	"deployment": &bintree{nil, map[string]*bintree{
		"deployment.yaml.template": &bintree{deploymentDeploymentYamlTemplate, map[string]*bintree{}},
	}},
	"protobuf": &bintree{nil, map[string]*bintree{
		"proto.proto": &bintree{protobufProtoProto, map[string]*bintree{}},
	}},
	"service_go": &bintree{service_go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
