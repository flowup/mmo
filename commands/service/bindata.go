// Code generated by go-bindata.
// sources:
// template/logger.go
// template/main.go
// template/proto.proto
// DO NOT EDIT!

package service

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateLoggerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x41\x8b\xdb\x30\x10\x85\xcf\xd6\xaf\x18\x72\x28\xf6\x12\x94\xd2\x63\xc1\x87\xd2\xee\x52\xca\x92\x2d\xb8\xb7\x52\x8a\x62\x8f\x95\x21\xb2\x26\x8c\xc6\x29\xc5\xf8\xbf\x17\xd9\x4e\xcb\xf6\x66\x7f\xf3\xde\xd3\xd3\xe8\xea\xda\x8b\xf3\x08\xd3\x64\x8f\x6e\xc0\x79\x36\x86\x86\x2b\x8b\x42\x69\x8a\x9d\x27\x3d\x8f\x27\xdb\xf2\x70\x48\x24\xe3\x35\x61\x3c\x04\xf6\x32\xa6\xdd\xeb\x29\xde\x5c\xb8\x9e\xf9\x44\x6e\x9b\xff\x4c\x18\x55\x7e\x67\x19\x2f\x62\xa5\x01\x77\xa6\x32\xe6\xe6\x24\x67\x1f\x0e\xf0\xcc\x1e\x7c\xe0\x93\x0b\x90\x50\x95\xa2\x4f\xc0\x3d\x04\xf6\x1e\xc5\x14\x79\xfc\xb0\xa6\xd9\xe7\x8d\x75\x29\x42\x0d\xbb\x69\xb2\x9f\x52\x9c\xe7\x25\xb0\x1f\x63\x0b\x14\x49\xcb\x0a\x26\xb3\xfa\x6a\xd8\x8c\x47\xfc\x55\x56\xe6\x7e\x9c\xa7\xe8\xa1\x67\x19\x9c\x02\x25\xf8\xd2\xbc\x1c\x17\xbd\x7d\x5a\x98\xa2\x40\x0d\x6f\x36\x6b\x9e\xfe\xe5\xd3\xbc\x26\xdb\x97\x51\xa1\x06\x4e\xb6\xd1\x8e\x47\x35\xa6\x08\x78\xc3\x90\xe0\x7d\x0d\xdf\x7f\xdc\xeb\x66\x34\x99\xa2\xd8\xfe\xbf\xba\x48\xed\x02\xf7\xff\xe0\x93\x53\x17\xfe\x87\x8f\x22\x2c\x77\x38\x9b\xe2\xcc\x7c\xd9\x03\x8a\xe4\xfc\x57\xab\xcd\x57\x6b\x96\xaf\xcf\xcc\x97\xb2\x4b\x71\x0f\x6b\x95\x6a\xb5\xd9\x6f\x34\x20\x2f\x75\xdf\xbd\x85\x07\xc8\x2f\x60\x1b\x6c\x39\x76\x9b\xa0\x51\xd7\x5e\x54\x5c\x8b\x1f\x39\xf6\xe4\x47\x71\x4a\x1c\xed\x63\x74\xa7\x80\x50\x83\xca\x88\xc6\x14\xd4\x2f\x0d\xea\x1a\x22\x05\xc8\xf7\xca\x9b\xc8\xc7\x26\xfb\xa1\xeb\xca\x1c\x56\xe5\xba\xb3\xf9\x13\x00\x00\xff\xff\x40\xd0\xa0\x5a\x50\x02\x00\x00")

func templateLoggerGoBytes() ([]byte, error) {
	return bindataRead(
		_templateLoggerGo,
		"template/logger.go",
	)
}

func templateLoggerGo() (*asset, error) {
	bytes, err := templateLoggerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/logger.go", size: 592, mode: os.FileMode(436), modTime: time.Unix(1499785572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x6e\xdc\x20\x10\x3e\xc3\x53\x4c\x91\x5a\x41\xe5\x60\xf5\xba\x55\x0e\xab\x56\x49\x0e\x51\xba\x4a\x23\xed\xa1\xea\x01\xdb\x63\x96\xd6\x06\x82\xd9\x58\x95\xe5\x77\xaf\xc0\xf6\x56\x49\x4f\x36\xf0\xcd\xf7\x07\x5e\xd5\xbf\x95\x46\xe8\x95\xb1\x94\x9a\xde\xbb\x10\x81\x53\xc2\x86\x3f\xb6\x66\x94\x30\xed\x9c\xee\x50\x6a\xd7\x29\xab\xa5\x0b\xba\xd4\xc1\xe7\x13\x8b\xb1\x3c\xc5\xe8\x33\xca\xc4\xd3\xb9\x92\xb5\xeb\xcb\xb6\x73\xe3\xd9\x97\x7d\xef\xca\x69\x92\x87\xe0\x7e\x61\x1d\x1f\x54\x8f\xf3\x9c\x36\x96\x3f\x46\xa7\xc9\xb4\x20\x8f\x58\xdd\x06\x5f\xcf\xf3\x2b\x0a\xd3\xfb\xe0\x2a\x55\x75\x78\x85\x76\x11\xbc\x1a\xb1\x2a\xb5\xcb\xff\x23\x56\x6c\x9a\xd0\x36\xf3\x4c\x05\xa5\xed\xd9\xd6\xd9\x3f\x17\x13\x25\x03\xec\xae\x21\xa1\xe4\x03\x8e\xdf\x31\xbc\x60\xe0\x82\x52\xf2\x46\xcf\xf9\x68\x9c\xcd\xe0\x1f\x3f\x57\x52\xf9\x2d\x6f\x4e\x33\xa5\xa4\x2c\xe1\x18\x94\xcf\x4c\x30\x64\x1a\x88\x0e\x36\x2b\xeb\x16\x25\x63\x50\xde\x63\xb3\x08\x6d\xd2\x89\x2b\x4d\xaf\xf2\x43\x01\xab\x9c\x94\x32\x79\x39\x29\xdb\x74\x0b\x3c\x99\xe7\x01\x07\x0f\xa9\x4a\xf9\x88\x83\x77\x76\xc0\x63\x30\x11\x43\x01\x01\x9f\xe1\xe3\x7a\xf2\x7c\xc6\x21\x0a\x98\x28\x79\xad\x2a\xf3\xe7\xee\xe9\xe9\x90\x89\xf2\x90\xa0\x24\xa5\x48\x93\xff\xac\x65\x9e\x65\x99\x48\xf6\x4d\x13\x76\x00\x00\x8c\x15\x94\x90\xbb\xc5\xd4\x6e\x81\xad\xab\x9b\x64\x6f\xb5\x2b\x8a\x44\x4a\xb6\xe6\xc9\xa8\x13\xe9\x87\xf4\x50\xe4\x51\x99\x78\x1b\xdc\xd9\x4f\xf9\x40\xee\x9b\x86\x7f\x12\xff\xb5\x4e\x89\x76\x4b\xe4\x25\xc7\xe5\x3d\xc8\x7b\xa7\xe5\x21\x18\x1b\x3b\xcb\xd9\x10\x55\x88\xc6\x6a\xd0\x8f\x87\x2f\x70\xbc\xd4\x0d\xce\xb2\x02\x18\x13\x94\x10\xd3\x02\x86\x4b\xac\xb5\x89\x7b\x33\x44\xb4\x7b\xbb\x34\xc3\xc5\xe7\x8c\x79\x77\x0d\xd6\x74\x59\xf0\x8d\xe2\x8d\x8a\xaa\x6b\x39\xdb\xae\x75\x07\xad\x32\x1d\x36\xe9\xaa\xb3\xe4\x0e\xde\xbf\xb0\x22\xb1\x24\xcd\x54\x69\x4a\xf7\xd5\x59\xe4\xa9\x62\x2e\xb6\x36\x72\xea\xd4\x02\x17\x74\xa6\x7f\x03\x00\x00\xff\xff\x88\x13\x7c\x4c\x56\x03\x00\x00")

func templateMainGoBytes() ([]byte, error) {
	return bindataRead(
		_templateMainGo,
		"template/main.go",
	)
}

func templateMainGo() (*asset, error) {
	bytes, err := templateMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.go", size: 854, mode: os.FileMode(436), modTime: time.Unix(1499785830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateProtoProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xae\xcc\x2b\x49\xac\x50\xb0\x55\x50\x2a\x28\xca\x2f\xc9\x37\x56\xb2\xe6\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xb5\xe6\xe2\x2a\x4e\x2d\x2a\xcb\x4c\x46\x12\x53\xa8\xe6\xe2\xaa\x05\x04\x00\x00\xff\xff\x48\x81\x80\x06\x3e\x00\x00\x00")

func templateProtoProtoBytes() ([]byte, error) {
	return bindataRead(
		_templateProtoProto,
		"template/proto.proto",
	)
}

func templateProtoProto() (*asset, error) {
	bytes, err := templateProtoProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/proto.proto", size: 62, mode: os.FileMode(436), modTime: time.Unix(1499780441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/logger.go": templateLoggerGo,
	"template/main.go": templateMainGo,
	"template/proto.proto": templateProtoProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"logger.go": &bintree{templateLoggerGo, map[string]*bintree{}},
		"main.go": &bintree{templateMainGo, map[string]*bintree{}},
		"proto.proto": &bintree{templateProtoProto, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

